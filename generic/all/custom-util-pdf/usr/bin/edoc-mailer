#!/bin/bash


## Usage
[ $# -lt 1 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} [options] <recipients-file>

SYNOPSIS:
  Parse the provided recipients file (standard input if '-') and sends an
  e-mail message (using 'mutt') with the matching document(s) found in the
  given directory(ies).

  The recipients list must be CSV formatted as:
    IDENTIFIER | E-MAIL

  While the document(s) must be named as:
    <prefix>IDENTIFIER<suffix>

OPTIONS:
  -s --simulate  Simulate mailing (without actually sending messages)
  -S --subject   Message subject
  -B --body      Message body file
  -P --prefix    Document name prefix [default:none]
  -X --suffix    Document name suffix [default:'.pdf']
  -W --wait      Wait the given amount of seconds after each message is sent [default:0]
  -d1            First document directory
  ...            ...
  -d5            Fifth document directory
  -n1            First document name
  ...            ...
  -n5            Fifth document name
  -r1            First document required (for sending)
  ...            ...
  -r5            Fifth document required (for sending)
  --             Treat all subsequent options as 'mutt' options
EOF


## Arguments
MY_SIMULATE=
MY_SUBJECT='E-document(s)'
MY_BODY=/dev/null
MY_PREFIX=
MY_SUFFIX='.pdf'
MY_WAIT=0
for my_dir in {1..5}; do
  MY_DIR[${my_dir}]=
  MY_NAME[${my_dir}]=
  MY_REQD[${my_dir}]=
done
while [ -n "${1}" ]; do
  case "${1}" in
    -s|--simulate)
      MY_SIMULATE='yes'
      ;;
    -S|--subject)
      shift; MY_SUBJECT="${1}"
      ;;
    -B|--body)
      shift; MY_BODY="${1}"
      ;;
    -P|--prefix)
      shift; MY_PREFIX="${1}"
      ;;
    -X|--suffix)
      shift; MY_SUFFIX="${1}"
      ;;
    -W|--wait)
      shift; MY_WAIT="${1}"
      ;;
    -d1|-d2|-d3|-d4|-d5)
      my_dir=${1#-d}
      shift; MY_DIR[${my_dir}]="${1%%/}"
      ;;
    -n1|-n2|-n3|-n4|-n5)
      my_dir=${1#-n}
      shift; MY_NAME[${my_dir}]="${1}"
      ;;
    -r1|-r2|-r3|-r4|-r5)
      my_dir=${1#-r}
      MY_REQD[${my_dir}]='yes'
      ;;
    --)
      shift; break
      ;;
    -)
      if [ -z "${MY_RCPT}" ]; then
        MY_RCPT="${1}"
      else
      	echo "ERROR: Too many arguments (${1})" >&2 && exit 1
      fi
      ;;
    -*)
      echo "ERROR: Invalid option (${1})" >&2 && exit 1
      ;;
    *)
      if [ -z "${MY_RCPT}" ]; then
        MY_RCPT="${1}"
      else
      	echo "ERROR: Too many arguments (${1})" >&2 && exit 1
      fi
  esac
  shift
done
[ -z "${MY_RCPT}" ] && echo 'ERROR: Missing recipients file' >&2 && exit 1
MY_TMPDIR=


## Checks
[ -z "$(which mutt)" ] && echo "ERROR: Missing 'mutt' utility" >&2 && exit 1
[ -n "${MY_BODY}" -a ! -r "${MY_BODY}" ] && echo "ERROR: Unreadable message body file (${MY_BODY})" >&2 && exit 1
[ -n "${MY_RCPT}" -a "${MY_RCPT}" != '-' -a ! -r "${MY_RCPT}" ] && echo "ERROR: Unreadable recipients file (${MY_RCPT})" >&2 && exit 1
MY_DIRS=
for my_dir in {1..5}; do
  [ -z "${MY_DIR[${my_dir}]}" ] && continue
  [ ! -d "${MY_DIR[${my_dir}]}" ] && echo "ERROR: Invalid directory (${MY_DIR[${my_dir}]})" >&2 && exit 1
  [ ! -r "${MY_DIR[${my_dir}]}" ] && echo "ERROR: Unreadable directory (${MY_DIR[${my_dir}]})" >&2 && exit 1
  MY_DIRS="${MY_DIRS}${MY_DIRS:+\n}${my_dir}"
  if [ -n "${MY_NAME[${my_dir}]}" ]; then
    MY_NAME[${my_dir}]="${MY_NAME[${my_dir}]##*/}"
  fi
done


## Temporary directory
MY_TMPDIR="$(mktemp -d)"
[ ! -d "${MY_TMPDIR}" ] && echo 'ERROR: Failed to create temporary directory' >&2 && exit 1


## Trap signals
trap 'rm -rf "${MY_TMPDIR}"' EXIT


## Process recipients
[ -n "${MY_SIMULATE}" ] && echo "INFO: SIMULATION; NO MESSAGES ARE ACTUALLY SENT!"
IFS=$'\n'; for my_rcpt in $(cat "${MY_RCPT}"); do
  my_rcpt_id=${my_rcpt%|*}
  my_rcpt_email=${my_rcpt#*|}
  if ! [[ "${my_rcpt_email}" =~ [-_.a-zA-Z0-9]+@[-_a-zA-Z0-9]+(.[-_a-zA-Z0-9])+ ]]; then
    echo "ERROR: Invalid e-mail address '${my_rcpt_email}' (${my_rcpt_id})" >&2
    continue
  fi
  my_rcpt_files=
  my_rcpt_skip=
  echo "NOTICE: Processing recipient (${my_rcpt_id})"
  for my_dir in $(echo -e ${MY_DIRS}); do
    my_file="${MY_DIR[${my_dir}]%%/}/${MY_PREFIX}${my_rcpt_id}${MY_SUFFIX}"
    if [ ! -e "${my_file}" ]; then
      if [ -n "${MY_REQD[${my_dir}]}" ]; then
        echo "ERROR: No matching file found (${my_file}); skipping recipient (${my_rcpt_id})" >&2
        my_rcpt_skip='yes'
        break
      fi
      echo "WARNING: No matching file found (${my_file})" >&2
      continue
    fi
    [ ! -r "${my_file}" ] && echo "ERROR: Unreadable file (${my_file})" >&2 && continue
    [ -n "${MY_SIMULATE}" ] && continue
    if [ -n "${MY_NAME[${my_dir}]}" ]; then
      my_name="${MY_NAME[${my_dir}]//%ID%/${my_rcpt_id}}"
      cp -p "${my_file}" "${MY_TMPDIR}/${my_name}"
      [ $? -ne 0 ] && echo "ERROR: Failed to copy file (${my_file} -> ${MY_TMPDIR}/${my_name})" >&2 && continue
      my_file="${MY_TMPDIR}/${my_name}"
    fi
    my_rcpt_files="${my_rcpt_files}${my_rcpt_files:+ }'${my_file}'"
  done
  [ -n "${my_rcpt_skip}" ] && continue
  echo "INFO: Sending documents to '${my_rcpt_email}' (${my_rcpt_id})"
  [ -n "${MY_SIMULATE}" ] && continue
  eval mutt -s "'${MY_SUBJECT}'" "$@" ${my_rcpt_files:+-a} ${my_rcpt_files} ${my_rcpt_files:+--} ${my_rcpt_email} < "${MY_BODY}"
  sleep ${MY_WAIT}
done


## Done
exit 0


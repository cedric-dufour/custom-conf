#!/bin/bash


## Usage
[ $# -lt 2 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} [<option> ...] <source-pdf> <destination-dir>

SYNOPSIS:
  Convert the given PDF file to HTML and PNG images for easier/faster browsing.

OPTIONS:
  -d, --output-dpi <int>
    Output PNG images resolution (DPI) [default:150]

  -s, --size <int>
  -sx, --size-x <int>
  -sy, --size-y <int>
    Output PNG images maximum width/height (pixels) [default:none]

  -p, --include-pdf
    Include original PDF file along the HTML/PNG output

  -co, --color {8bit-opt|8bit|rgb}
    Color encoding [default:8bit-opt]

  -cs, --charset <string>
    Filesystem character encoding [default:UTF-8]

  -nf, --no-frameset
    Do not use FRAMESET in generated HTML

  -h, --html-template  HTML template used to replace the PDF file
    Any included '%FILE%', '%ID%' and '%PAGES%' anchors will be replaced with
    the approriate corresponding values.
    If not specified, the built-in template will be used.

AUTHOR:
  CÃ©dric Dufour - http://cedric.dufour.name
EOF


## Arguments
IMG_DPI=150
IMG_X=
IMG_Y=
PDF_INCL=
COLOR='8bit-opt'
CHARSET='UTF-8'
HTML_NOFRM=
HTML_TMPL=
SRC_PDF=
DST_DIR=
while [ -n "${1}" ]; do
  case "${1}" in
    '-d'|'--output-dpi')  
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-d)' >&2 && exit 1; IMG_DPI="${1}";;
    '-s'|'--size')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-s)' >&2 && exit 1; IMG_X="${1}"; IMG_Y="${1}";;
    '-sx'|'--size-x')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-sx)' >&2 && exit 1; IMG_X="${1}";;
    '-sy'|'--size-y')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-sx)' >&2 && exit 1; IMG_Y="${1}";;
    '-p'|'--include-pdf')
      PDF_INCL='yes';;
    '-co'|'--color')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-co)' >&2 && exit 1; COLOR="${1}";;
    '-cs'|'--charset')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-cs)' >&2 && exit 1; CHARSET="${1}";;
    '-nf'|'--no-frameset')
      HTML_NOFRM='yes';;
    '-h'|'--html-template')
      shift; [ -z "${1}" ] && echo 'ERROR: Missing option value (-h)' >&2 && exit 1; HTML_TMPL="${1}";;
    *)
      if [ -z "${SRC_PDF}" ]; then SRC_PDF="${1}"
      elif [ -z "${DST_DIR}" ]; then DST_DIR="${1}"
      else echo "ERROR: Invalid (extra) argument (${1})" >&2 && exit 1
      fi
      ;;
  esac
  shift
done


## Checks

# Dependencies
[ -z "$(which pdftoppm)" ] && echo "ERROR[$$]: 'pdftoppm' cannot be found (poppler-utils)" >&2 && exit 1
[ -z "$(which convert)" ] && echo "ERROR[$$]: 'convert' cannot be found (imagemagick)" >&2 && exit 1

# Directories and files
DST_DIR="${DST_DIR%%/}"
[ ! -r "${SRC_PDF}" ] && echo "ERROR[$$]: Unable to read source PDF file (${SRC_PDF})" >&2 && exit 1
[ ! -d "${DST_DIR}" ] && echo "ERROR[$$]: Invalid destination directory (${DST_DIR})" >&2 && exit 1
[ ! -w "${DST_DIR}" ] && echo "ERROR[$$]: Unable to write to destination directory (${DST_DIR})" >&2 && exit 1
[ -n "${HTML_TMPL}" ] && [ ! -r "${HTML_TMPL}" ] && echo "ERROR[$$]: Unable to read HTML template file (${HTML_TMPL})" >&2 && exit 1


## Convert
f_dst="${SRC_PDF##*/}"
p_dst="${DST_DIR}/${f_dst}"
f_dst_prefix="${f_dst%.*}"
f_dst_id="$(echo ${f_dst_prefix} | cksum | cut -d' ' -f1)"
p_dst_prefix="${DST_DIR}/${f_dst_prefix}"
[ "${PDF_INCL}" == 'yes' ] && cp "${SRC_PDF}" "${p_dst}"
[ ! -e "${p_dst_prefix}" ] && mkdir "${p_dst_prefix}"
[ ! -d "${p_dst_prefix}" ] && echo "ERROR[$$]: Failed to create destination directory (${p_dst_prefix})" >&2 && exit 1
# NOTE:
#  - Let's use Poppler 'pdftoppm' utility instead of 'convert' to perform PDF-to-image conversion (less buggy)
#  - Let's use 'convert' to generate optimized PNG images based on 'pdftoppm' PPM output
#  - Let's use and 8-bit palette and highest Zlib compression (with no adaptive filtering), which gives the best size/quality ratio for most PDF files
resize=
if [ -n "${IMG_X}" -o -n "${IMG_Y}" ]; then
  if [ -n "${IMG_X}" -a -n "${IMG_Y}" ]; then
    resize="-filter blackman -resize ${IMG_X}x${IMG_Y}>"
  elif [ -n "${IMG_X}" ]; then
    resize="-filter blackman -resize ${IMG_X}x999999>"
  else
    resize="-filter blackman -resize 999999x${IMG_Y}>"
  fi
fi
pdftoppm -r ${IMG_DPI} -cropbox -thinlinemode shape -tiff -tiffcompression deflate "${SRC_PDF}" "${p_dst_prefix}/img" 2>/dev/null
for src_img in "${p_dst_prefix}/img"*.tif; do
  dst_img="$(echo "${src_img}" | sed 's/img-0*\([1-9][0-9]*\)\.tif/img-\1.png/')"
  case "${COLOR}" in
    8bit-opt) convert "${src_img}" -trim -fuzz 10% ${resize} -type optimize -quality 90 png8:"${dst_img}";;
    8bit) convert "${src_img}" -trim -fuzz 10% ${resize} -type palette -quality 90 png8:"${dst_img}";;
    rgb) convert "${src_img}" -trim -fuzz 10% ${resize} -quality 90 "${dst_img}";;
    *) echo "ERROR[$$]: Invalid color encoding (${COLOR})" >&2; rm "${src_img}"; exit 1;;
  esac
  rm "${src_img}"
done
pages_pdf="$(ls -1 "${p_dst_prefix}"/*.png | wc -l)"
if [ -n "${HTML_TMPL}" ]; then
  cp "${HTML_TMPL}" "${p_dst_prefix}.html"
  sed -i "s|%FILE%|${f_dst_prefix}|g;s|%ID%|${f_dst_id}|g;s|%PAGES%|${pages_pdf}|g" "${p_dst_prefix}.html"
elif [ -n "${HTML_NOFRM}" ]; then
  cat << EOF > "${p_dst_prefix}.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=${CHARSET}" />
<TITLE>${f_dst_prefix}</TITLE>
<STYLE TYPE="text/css">
BODY {MARGIN:5px;}
DIV.pdf TABLE {MARGIN:0px;FONT:12px sans-serif;BORDER:none;BORDER-COLLAPSE:collapse;}
DIV.pdf TD {PADDING:0px;}
DIV.pdf TABLE.nav TD {PADDING:0px 10px;FONT-SIZE:20px;}
DIV.pdf TABLE.sel TD {PADDING:0px 2px;FONT-SIZE:16px;}
DIV.pdf SELECT {FONT:16px sans-serif;BORDER:solid 1px #000000;}
DIV.pdf A {PADDING:0px 10px;COLOR:#000000;TEXT-DECORATION:none;}
DIV.pdf A:hover {FONT-WEIGHT:bold;}
DIV.pdf A:visited {COLOR:#000000;}
</STYLE>
<SCRIPT TYPE="text/javascript">
var pFile='${f_dst_prefix}/img';
var pPages=${pages_pdf};
var oGoto=null;
var oImg=null;
function init() {
  oGoto=document.getElementById('goto');
  oPage=document.getElementById('page');
  for(i=0;i<pPages;i++) oGoto.options[i]=new Option(i+1);
}
function show(p) {
  if(p<0) p=0; else if(p>=pPages) p=pPages-1;
  oPage.src=( pFile+'-'+(p+1)+'.png' );
  oGoto.selectedIndex=p;
}
</SCRIPT>
</HEAD>
<BODY ONLOAD="javascript:init();show(0);">
<DIV CLASS="pdf">
<TABLE CLASS="nav"><TR>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(0);">&laquo;</A></TD>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(oGoto.selectedIndex-1);">&lsaquo;</A></TD>
<TD><TABLE CLASS="sel"><TR><TD><SELECT ID="goto" ONCHANGE="javascript:show(oGoto.selectedIndex);"></SELECT></TD><TD>/</TD><TD>${pages_pdf}</TD></TR></TABLE></TD>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(oGoto.selectedIndex+1);">&rsaquo;</A></TD>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(999999);">&raquo;</A></TD>
${PDF_INCL/yes/<TD><A HREF="${f_dst}">&nabla;</A></TD>}
</TR></TABLE>
<TABLE><TR><TD><IMG ID="page"/></TD></TR></TABLE>
</DIV>
</BODY>
</HTML>
EOF
else
  cat << EOF > "${p_dst_prefix}.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=${CHARSET}" />
<TITLE>${f_dst_prefix}</TITLE>
</HEAD>
<FRAMESET ROWS="30,*" BORDER="0">
<FRAME FRAMEBORDER="0" SCROLLING="no" NORESIZE SRC="${f_dst_prefix}_top.html" />
<FRAME NAME="PDF_${f_dst_id}_page" FRAMEBORDER="0" SCROLLING="auto" />
</FRAMESET>
</HTML>
EOF
  cat << EOF > "${p_dst_prefix}_top.html"
<HTML>
<HEAD>
<META HTTP-EQUIV="content-type" CONTENT="text/html; charset=${CHARSET}" />
<TITLE>${f_dst_prefix}</TITLE>
<STYLE TYPE="text/css">
BODY {MARGIN:5px;}
DIV.pdf TABLE {MARGIN:0px;FONT:12px sans-serif;BORDER:none;BORDER-COLLAPSE:collapse;}
DIV.pdf TD {PADDING:0px;}
DIV.pdf TABLE.nav TD {PADDING:0px 10px;FONT-SIZE:20px;}
DIV.pdf TABLE.sel TD {PADDING:0px 2px;FONT-SIZE:16px;}
DIV.pdf SELECT {FONT:16px sans-serif;BORDER:solid 1px #000000;}
DIV.pdf A {PADDING:0px 10px;COLOR:#000000;TEXT-DECORATION:none;}
DIV.pdf A:hover {FONT-WEIGHT:bold;}
DIV.pdf A:visited {COLOR:#000000;}
</STYLE>
<SCRIPT TYPE="text/javascript">
var pFile='${f_dst_prefix}/img';
var pPages=${pages_pdf};
var oGoto=null;
var oImg=null;
function init() {
  oGoto=document.getElementById('goto');
  oPage=parent.PDF_${f_dst_id}_page;
  for(i=0;i<pPages;i++) oGoto.options[i]=new Option(i+1);
}
function show(p) {
  if(p<0) p=0; else if(p>=pPages) p=pPages-1;
  oPage.location.replace( pFile+'-'+(p+1)+'.png' );
  oGoto.selectedIndex=p;
}
</SCRIPT>
</HEAD>
<BODY ONLOAD="javascript:init();show(0);">
<DIV CLASS="pdf">
<TABLE CLASS=nav><TR>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(0);">&laquo;</A></TD>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(oGoto.selectedIndex-1);">&lsaquo;</A></TD>
<TD><TABLE CLASS="sel"><TR><TD><SELECT ID="goto" ONCHANGE="javascript:show(oGoto.selectedIndex);"></SELECT></TD><TD>/</TD><TD>${pages_pdf}</TD></TR></TABLE></TD>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(oGoto.selectedIndex+1);">&rsaquo;</A></TD>
<TD><A HREF="javascript:;" ONCLICK="javascript:show(999999);">&raquo;</A></TD>
${PDF_INCL/yes/<TD><A HREF="${f_dst}" TARGET="PDF_${f_dst_id}_page">&nabla;</A></TD>}
</TR></TABLE>
</DIV>
</BODY>
</HTML>
EOF
fi


## Done
exit 0


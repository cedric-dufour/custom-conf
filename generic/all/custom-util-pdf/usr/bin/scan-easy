#!/bin/bash

# Usage
[ "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE:
  ${0##*/} [options] { <output.{tif|pdf|ps}> | <printer> | <email> }

SYNOPSIS:
  Scans (multiple) page(s) from scanner (optionally specified by device ID) to TIF file.

OPTIONS:
  -D   --name           Document name                  [<auto>]
  -C   --color          Color mode {Color|Gray|BW}     [Color]
  -R   --resolution     Resolution (DPI)               [300]
  -X   --width          Scan width (mm)                [210]
  -Y   --height         Scan height (mm)               [297]
  -M   --media          Output media                   [A4]
  -Ib  --black          Auto-contrast black point (%)  [1.0]
  -Iw  --white          Auto-contrast white point (%)  [90.0]
  -It  --threshold      Black-White threshold (%)      [50.0]
  -Iq  --quality        (Color/Gray) JPEG quality      [50]
  -P   --print          Send output printer
  -Pn  --copies         Copies quantity                [1]
  -E   --email          Send output by e-mail
  -W   --preview        (Pre-)view document output
  -So  --options-scan   Scan (scanimage) options       []
  -Io  --options-image  Image (convert) options        []
  -Po  --options-print  Printer (lp) options           [-o sides=two-sided-long-edge]
  -F   --from           Page(s) source (device|file)   []
EOF

# Arguments
MY_OUTPUT=
MY_NAME=
MY_COLOR='Color'
MY_RESOLUTION='300'
MY_WIDTH='210'
MY_HEIGHT='297'
MY_MEDIA='a4'
MY_BLACK='1.0'
MY_WHITE='90.0'
MY_THRESHOLD='50.0'
MY_QUALITY='50'
MY_DESTINATION='file'
MY_COPIES='1'
MY_PREVIEW=
MY_OPTIONS_SCAN=
MY_OPTIONS_IMAGE=
MY_OPTIONS_PRINT='-o sides=two-sided-long-edge'
MY_INPUT=
MY_SOURCE='scanner'
EXT_OPTIONS=
while [ -n "${1}" ]; do
  case "${1}" in
    -D|--name) shift; MY_NAME="${1}" ;;
    -C|--color) shift; MY_COLOR=${1} ;;
    -R|--resolution) shift; MY_RESOLUTION=$(( 0 + ${1} )) ;;
    -X|--width) shift; MY_WIDTH=$(( 0 + ${1} )) ;;
    -Y|--height) shift; MY_HEIGHT=$(( 0 + ${1} )) ;;
    -M|--media) shift; MY_MEDIA=${1} ;;
    -Ib|--black) shift; MY_BLACK=${1} ;;
    -Iw|--white) shift; MY_WHITE=${1} ;;
    -It|--threshold) shift; MY_THRESHOLD=${1} ;;
    -Iq|--quality) shift; MY_QUALITY=$(( 0 + ${1} )) ;;
    -P|--print) MY_DESTINATION='print' ;;
    -Pn|--copies) shift; MY_COPIES=$(( 0 + ${1} )) ;;
    -E|--email) MY_DESTINATION='email' ;;
    -W|--preview) MY_PREVIEW='yes' ;;
    -So|--options-scan) shift; MY_OPTIONS_SCAN="${1}" ;;
    -Io|--options-image) shift; MY_OPTIONS_IMAGE="${1}" ;;
    -Po|--options-print) shift; MY_OPTIONS_PRINT="${1}" ;;
    -F|--from) shift; MY_INPUT="${1}" ;;
    -*) echo "ERROR: Invalid option (${1})" >&2 && exit 1 ;;
    *)
      [ -n "${MY_OUTPUT}" ] && echo 'ERROR: Too many arguments' >&2 && exit 1
      MY_OUTPUT="${1}"
      ;;
  esac
  shift
done
# ... check
[ ${MY_RESOLUTION} -lt 25 ] && echo "ERROR: Invalid resolution (${MY_RESOLUTION})" >&2 && exit 1
[ ${MY_WIDTH} -lt 10 ] && echo "ERROR: Invalid width (${MY_WIDTH})" >&2 && exit 1
[ ${MY_HEIGHT} -lt 10 ] && echo "ERROR: Invalid height (${MY_HEIGHT})" >&2 && exit 1
[ ${MY_QUALITY} -lt 1 ] && echo "ERROR: Invalid quality (${MY_QUALITY})" >&2 && exit 1
[ ${MY_COPIES} -lt 1 ] && echo "ERROR: Invalid copies quantity (${MY_COPIES})" >&2 && exit 1

# Check dependencies
[ -z "$(which scanimage)" ] && echo "ERROR: 'scanimage' was not found" >&2 && exit 1
[ -z "$(which convert)" ] && echo "ERROR: 'convert' was not found" >&2 && exit 1
[ -z "$(which tiffcp)" ] && echo "ERROR: 'tiffcp' was not found" >&2 && exit 1

# Parameters
# ... images
MY_COMPRESSION=
MY_CONVERT=
case "${MY_COLOR}" in
  'color'|'Color') MY_COMPRESSION="jpeg:${MY_QUALITY}" ;;
  'gray'|'Gray') MY_CONVERT='-colorspace gray'; MY_COMPRESSION="jpeg:${MY_QUALITY}" ;;
  'bw'|'BW') MY_CONVERT="-threshold ${MY_THRESHOLD}% -monochrome"; MY_COMPRESSION='g4' ;;
  *) echo "ERROR: Invalid color (${MY_COLOR})" >&2 && exit 1
esac
# ... destination
MY_OUTPUT_TIF=
MY_OUTPUT_PDF=
MY_OUTPUT_PS=
case "${MY_DESTINATION}" in

  'file')
    if [ -z "${MY_OUTPUT}" ]; then
      [ -z "${MY_NAME}" ] && MY_NAME="$(date +'%Y%m%d%H%M%S')-$(whoami).scan"
      MY_OUTPUT="${MY_NAME}.pdf"
    elif [ -z "${MY_NAME}" ]; then
      MY_NAME="${MY_OUTPUT##*/}"; MY_NAME="${MY_NAME%.*}"
    fi
    MY_FORMAT="${MY_OUTPUT##*.}"; MY_FORMAT="${MY_FORMAT,,}"
    case "${MY_FORMAT}" in

      'tif')
        MY_OUTPUT_TIF="${MY_OUTPUT}"
        ;;

      'pdf')
        # NOTE: 'tiff2pdf' is plain buggy, so we MUST use 'convert' twice; let's not loose quality on Tiff file
        MY_COMPRESSION='zip:p9'
        MY_OUTPUT_PDF="${MY_OUTPUT}"
        ;;

      'ps')
        # NOTE: 'tiff2ps -3' will allow 'zip:p9' to passthrough without transcoding
        MY_COMPRESSION='zip:p9'
        MY_OUTPUT_PS="${MY_OUTPUT}"
        ;;

      *) echo "ERROR: Invalid file format (${MY_FORMAT})" >&2 && exit 1

    esac
    [ -n "${MY_PREVIEW}" ] && MY_PREVIEW="${MY_OUTPUT}"
    ;;

  'print')
    [ -z "${MY_OUTPUT}" ] && MY_OUTPUT="${PRINTER}"
    [ -z "${MY_OUTPUT}" ] && echo 'ERROR: Missing printer name argument' >&2 && exit 1
    # NOTE: We'll pipe 'tiff2ps -3' directly to 'lp'
    MY_COMPRESSION='zip:p9'
    MY_FORMAT=
    [ -n "${MY_PREVIEW}" ] && MY_PREVIEW="tif"
    ;;

  'email')
    [ -z "${MY_OUTPUT}" ] && MY_OUTPUT="$(whoami)"
    # NOTE: Let's assume PDF is the most sensible format
    MY_FORMAT='pdf'
    [ -n "${MY_PREVIEW}" ] && MY_PREVIEW="pdf"
    ;;

esac
# ... files
[ -z "${MY_NAME}" ] && MY_NAME="$(date +'%Y%m%d%H%M%S')-$(whoami).scan"
MY_DIRTMP="${TMP:-/tmp}/${MY_NAME}.d"
mkdir "${MY_DIRTMP}" || exit 1
trap "rm -rf '${MY_DIRTMP}'" EXIT
chmod 700 "${MY_DIRTMP}" || exit 1
MY_FILETMP="${MY_DIRTMP}/output"
[ -z "${MY_OUTPUT_TIF}" ] && MY_OUTPUT_TIF="${MY_FILETMP}.tif"
[ -z "${MY_OUTPUT_PDF}" ] && MY_OUTPUT_PDF="${MY_FILETMP}.pdf"
[ "${MY_PREVIEW}" == 'tif' ] && MY_PREVIEW="${MY_OUTPUT_TIF}"
[ "${MY_PREVIEW}" == 'pdf' ] && MY_PREVIEW="${MY_OUTPUT_PDF}"
# ... source
if [ -d "${MY_INPUT}" ]; then
  MY_SOURCE='dir'
elif [ -f "${MY_INPUT}" ]; then
  MY_SOURCE='file'
fi


# Scan/import page(s)
p=0
if [ "${MY_SOURCE}" == 'scanner' ]; then
  while true; do
    let p1=p+1
    P="000${p}"; P=${P:${#P}-3}
    while true; do
      echo -n "[S]can page N째${p1}, [D]one with scanning (or <CTRL-C> to abort) [S/d] ? " && read answer
      case "${answer}" in
        'D'|'d')
          [ ${p} -eq 0 ] && echo 'Empty document (no page); bailing out.' && exit 0
          echo "Done with scanning; generating output (${p} pages)..."
          break 2;;
        'S'|'s'|'')
          break 1;;
      esac
    done
    echo "Scanning page N째${p1}..."
    scanimage ${MY_INPUT:+--device-name ${MY_INPUT}} --progress --mode Color -x ${MY_WIDTH} -y ${MY_HEIGHT} --resolution ${MY_RESOLUTION} --format tiff ${MY_OPTIONS_SCAN} \
    | convert - -contrast-stretch "${MY_BLACK}%x${MY_WHITE}%" ${MY_CONVERT} -compress zip ${MY_OPTIONS_IMAGE} "${MY_FILETMP}.${P}.tif"
    [ $? -ne 0 ] && echo 'ERROR: Failed to scan page' >&2 && exit 1
    p=${p1}
  done
elif [ "${MY_SOURCE}" == 'dir' ]; then
  while read input_file; do
    let p1=p+1
    P="000${p}"; P=${P:${#P}-3}
    echo "Importing file '${input_file}' as page N째${p1}..."
    convert "${input_file}" -contrast-stretch "${MY_BLACK}%x${MY_WHITE}%" ${MY_CONVERT} -resize "$(( ${MY_WIDTH}*${MY_RESOLUTION}*10/254 ))x$(( ${MY_HEIGHT}*${MY_RESOLUTION}*10/254 ))" -density ${MY_RESOLUTION} -units PixelsPerInch -compress zip ${MY_OPTIONS_IMAGE} "${MY_FILETMP}.${P}.tif"
    [ $? -ne 0 ] && echo 'ERROR: Failed to import file' >&2 && exit 1
    p=${p1}
  done < <(find -L "${MY_INPUT}" -maxdepth 1 -type f -not -name '.*' | sort)
elif [ "${MY_SOURCE}" == 'file' ]; then
  case "${MY_INPUT##*.}" in
    'pdf'|'PDF')
      [ -z "$(which pdftoppm)" ] && echo "ERROR: 'pdftoppm' was not found" >&2 && exit 1
      echo "Extracting pages from PDF file '${MY_INPUT}'..."
      pdftoppm -r ${MY_RESOLUTION} -cropbox -thinlinemode shape -tiff -tiffcompression deflate "${MY_INPUT}" "${MY_DIRTMP}/input."
      [ $? -ne 0 ] && echo 'ERROR: Failed to extract pages' >&2 && exit 1
      ;;
    'tif'|'TIF'|'tiff'|'TIFF')
      [ -z "$(which tiffsplit)" ] && echo "ERROR: 'tiffsplit' was not found" >&2 && exit 1
      echo "Extracting pages from TIF file '${MY_INPUT}'..."
      tiffsplit "${MY_INPUT}" "${MY_DIRTMP}/input."
      [ $? -ne 0 ] && echo 'ERROR: Failed to extract pages' >&2 && exit 1
      ;;
    *)
      echo "ERROR: Unsupported input type (${MY_INPUT})" >&2 && exit 1
      ;;
  esac
  while read input_file; do
    let p1=p+1
    P="000${p}"; P=${P:${#P}-3}
    echo "Importing page N째${p1}..."
    convert "${input_file}" -contrast-stretch "${MY_BLACK}%x${MY_WHITE}%" ${MY_CONVERT} -resize "$(( ${MY_WIDTH}*${MY_RESOLUTION}*10/254 ))x$(( ${MY_HEIGHT}*${MY_RESOLUTION}*10/254 ))" -density ${MY_RESOLUTION} -units PixelsPerInch -compress zip ${MY_OPTIONS_IMAGE} "${MY_FILETMP}.${P}.tif"
    [ $? -ne 0 ] && echo 'ERROR: Failed to import file' >&2 && exit 1
    p=${p1}
  done < <(find "${MY_DIRTMP}" -maxdepth 1 -type f -name 'input.*' | sort)
else
  echo "ERROR: Invalid source type (${MY_SOURCE})" >&2 && exit 1
fi
unset p

# Create TIF file
# NOTE: make sure tiffcp uses single-strip compression, such as to avoid transcoding on tiff2pdf/tiff2ps
tiffcp -s -c ${MY_COMPRESSION} "${MY_FILETMP}".*.tif "${MY_OUTPUT_TIF}"
[ $? -ne 0 ] && echo 'ERROR: Failed to create document' >&2 && exit 1

# Create other format files
case "${MY_FORMAT}" in

  'pdf')
     # NOTE: 'tiff2pdf' is plain buggy, so we MUST use 'convert'
    case "${MY_COLOR}" in
      'color'|'Color') MY_COMPRESSION="-compress jpeg -quality ${MY_QUALITY}" ;;
      'gray'|'Gray') MY_COMPRESSION="-compress jpeg -quality ${MY_QUALITY}" ;;
      'bw'|'BW') MY_COMPRESSION='-compress group4' ;;
    esac
    # NOTE: Do NOT (re)set the PDF -page/-density; the source Tiff DOES have the proper resolution set
    # BUG: PDF title non-ASCII characters encoding fixed as per ImageMagick 6.9.2-9
    #      http://git.imagemagick.org/repos/ImageMagick/commit/ce4a355a916bf3c470be4503b70e8a029dd6f6ad
    if [ "$(( echo 'Version: ImageMagick 6.9.2-9'; convert -version | fgrep 'Version:') | sort -V | head -n 1)" == 'Version: ImageMagick 6.9.2-9' ]; then
        convert "${MY_OUTPUT_TIF}" ${MY_COMPRESSION} "${MY_OUTPUT_PDF}"
    else
        # NOTE: Default encoding for '/Title' is PDFDocEncoding, a superset of Windows code page 1252
        #       https://www.adobe.com/content/dam/Adobe/en/devnet/pdf/pdfs/PDF32000_2008.pdf
        my_output_pdf_cp1252="$(echo "${MY_OUTPUT_PDF}" | iconv -f utf8 -t cp1252)"
        convert "${MY_OUTPUT_TIF}" ${MY_COMPRESSION} "${my_output_pdf_cp1252}"
        mv "${my_output_pdf_cp1252}" "${MY_OUTPUT_PDF}"
        unset my_output_pdf_cp1252
    fi
    ;;

  'ps')
    [ -z "$(which tiff2ps)" ] && echo "ERROR: 'tiff2ps' was not found" >&2 && exit 1
    tiff2ps -3 -t "${MY_NAME}" "${MY_OUTPUT_TIF}" -O "${MY_OUTPUT_PS}"
    ;;

esac

# (Pre)view
if [ -n "${MY_PREVIEW}" ]; then
  echo '(Pre-)view output...'
  file "${MY_PREVIEW}"
  ls -lh "${MY_PREVIEW}"
  ${VIEWER:-evince} "${MY_PREVIEW}" >/dev/null 2>&1 &
  if [ "${MY_DESTINATION}" != 'file' ]; then
    echo -n 'Please press <ENTER> to continue (or <CTRL-C> to abort)' && read
  fi
fi

# Handle destination
case "${MY_DESTINATION}" in

  'print')
    [ -z "$(which tiff2ps)" ] && echo "ERROR: 'tiff2ps' was not found" >&2 && exit 1
    [ -z "$(which lp)" ] && echo "ERROR: 'lp' was not found" >&2 && exit 1
    tiff2ps -3 "${MY_OUTPUT_TIF}" | lp -i "${MY_NAME}" -n ${MY_COPIES} -o media=${MY_MEDIA,,} ${MY_OPTIONS_PRINT} -d ${MY_OUTPUT}
    ;;

  'email')
    [ -z "$(which mutt)" ] && echo "ERROR: 'mutt' was not found" >&2 && exit 1
    echo "Please find attached the following PDF file: ${MY_NAME}.${MY_FORMAT}" | mutt -a "${MY_OUTPUT_PDF}" -s "${MY_NAME}" -- "${MY_OUTPUT}"
    ;;

esac

# Done
echo "Document(s)/page(s) successfully scanned to: ${MY_OUTPUT}"
exit 0


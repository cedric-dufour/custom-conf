#!/bin/bash
#
# License: GNU General Public License (GPL)
#
#   Resource Agent for domains managed by the libvirt API.
#   Requires a running libvirt daemon (libvirtd).
#
#   (c) 2008-2010 Florian Haas, Dejan Muhamedagic,
#                 and Linux-HA contributors
#
# 2014.08.11: Cédric Dufour <cedric.dufour@ced-network.net>
#   Simplified version of 'VirtualDomain' OCF script.
#   (Partially) integrated 'MailTo' OCF script
#
# 2018.05.18: Cédric Dufour <cedric.dufour@ced-network.net>
#   Further consolidation among my other custom resource agents.
#
# REF:
#   http://www.linux-ha.org/doc/dev-guides/ra-dev-guide.html
#
# Usage: ${0} {start|stop|status|monitor|migrate_to|migrate_from|meta-data|validate-all}
#


## Initialization
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs


## Defaults
OCF_RESKEY_force_stop_default=0
: ${OCF_RESKEY_force_stop:=${OCF_RESKEY_force_stop_default}}
OCF_RESKEY_email_recipients_default='root'
: ${OCF_RESKEY_email_recipients:=${OCF_RESKEY_email_recipients_default}}
OCF_RESKEY_email_subject_default='[OCF:LibvirtQemu:%domain%]'
: ${OCF_RESKEY_email_subject:=${OCF_RESKEY_email_subject_default}}
OCF_RESKEY_strict_config_default=0
: ${OCF_RESKEY_strict_config:=${OCF_RESKEY_strict_config_default}}


## Parameters
VIRSH_OPTIONS="--quiet"


## Usage
usage() {
  echo "USAGE: ${0##*/} {start|stop|status|monitor|migrate_to|migrate_from|meta-data|validate-all}"
}

meta_data() {
    cat <<EOF
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="LibvirtQemu">
  <version>1.1</version>

  <longdesc lang="en">
    Resource agent for managing a libvirt (qemu) virtual domain (create, migrate,
    shutdown, destroy).
  </longdesc>
  <shortdesc lang="en">Manage libvirt virtual domain</shortdesc>

  <parameters>

    <parameter name="config" unique="1" required="1">
      <longdesc lang="en">
        Absolute path to the libvirt (qemu) configuration file.
      </longdesc>
      <shortdesc lang="en">Libvirt (qemu) configuration file</shortdesc>
      <content type="string" default="" />
    </parameter>

    <parameter name="force_stop">
      <longdesc lang="en">
        Always forcefully shut down ("destroy") the domain on stop. The default
        behavior is to resort to a forceful shutdown only after a graceful
        shutdown attempt has failed. You should only set this to true if your
        virtual domain does not support graceful shutdown.
        WARNING! This may lead to data corruption!
      </longdesc>
      <shortdesc lang="en">Always force shutdown on stop</shortdesc>
      <content type="boolean" default="${OCF_RESKEY_force_stop_default}" />
    </parameter>

    <parameter name="migration_transport">
      <longdesc lang="en">
        Transport used to connect to the remote hypervisor while migrating.
        Please refer to the libvirt documentation for details on transports
        available. If this parameter is omitted, the resource will use
        libvirt's default transport to connect to the remote hypervisor.
      </longdesc>
      <shortdesc lang="en">Remote hypervisor transport</shortdesc>
      <content type="string" default="" />
    </parameter>

    <parameter name="migration_network_suffix">
      <longdesc lang="en">
        Use a dedicated migration network. The migration URI is composed by
        adding this parameters value to the end of the node name. If the node
        name happens to be an FQDN (as opposed to an unqualified host name),
        insert the suffix immediately prior to the first period (.) in the
        FQDN.
        NOTE: Be sure this composed host name is locally resolveable and the
        associated IP is reachable through the favored network.
      </longdesc>
      <shortdesc lang="en">Migration network host name suffix</shortdesc>
      <content type="string" default="" />
    </parameter>

    <parameter name="monitor_scripts">
      <longdesc lang="en">
        To additionally monitor services within the virtual domain, add this
        parameter with a list of scripts to monitor.
        NOTE: when monitor scripts are used, the start and migrate_from
        operations will complete only when all monitor scripts have completed
        successfully. Be sure to set the timeout of these operations to
        accommodate the delay that may be induced by those scripts.
      </longdesc>
      <shortdesc lang="en">Space-separated list of monitor scripts</shortdesc>
      <content type="string" default="" />
    </parameter>

    <parameter name="email_recipients">
      <longdesc lang="en">
        Space-separated list of recipient(s) e-mail address(es), to send status
        status change notifications to.
      </longdesc>
      <shortdesc lang="en">E-mail recipient(s) address(es)</shortdesc>
      <content type="string" default="${OCF_RESKEY_email_recipients_default}" />
    </parameter>

    <parameter name="email_subject">
      <longdesc lang="en">
        The subject of the status notification e-mails.
        NOTE: The '%resource%' macro shall be replaced with the resource ID;
        the '%domain%' macro with the actual domain name.
      </longdesc>
      <shortdesc lang="en">E-mail subject</shortdesc>
      <content type="string" default="${OCF_RESKEY_email_subject_default}" />
    </parameter>

    <parameter name="strict_config">
      <longdesc lang="en">
        Consider configuration errors as critical, prompting the cluster to
        fence the hosting node.
        WARNING! You MUST make sure the configuration is sane before enabling
        this option! Otherwise, the misconfigured resource will trigger fencing
        of each and every nodes as the cluster attempts to start it elsewhere
        (and fail systematically), leading to entire cluster failure.
      </longdesc>
      <shortdesc lang="en">Consider configuration errors critical</shortdesc>
      <content type="boolean" default="${OCF_RESKEY_strict_config_default}" />
    </parameter>

  </parameters>

  <actions>
    <action name="start" timeout="30" />
    <action name="stop" timeout="60" />
    <action name="status" depth="0" timeout="30" interval="60" />
    <action name="monitor" depth="0" timeout="30" interval="60" />
    <action name="migrate_from" timeout="60" />
    <action name="migrate_to" timeout="60" />
    <action name="meta-data" timeout="5" />
    <action name="validate-all" timeout="5" />
  </actions>

</resource-agent>
EOF
}


## Helpers

# Check resource configuration
LibvirtQemu_CheckConfig() {
  # Check configuration file
  if [ -z "${OCF_RESKEY_config}" ]; then
    ocf_log err "*::CheckConfig: Missing/empty configuration parameter 'config'"
    return ${OCF_ERR_CONFIGURED}
  fi
  # ... readable ?
  if [ ! -r "${OCF_RESKEY_config}" ]; then
    if ocf_is_probe; then
      ocf_log warn "*::CheckConfig: Missing/unreadable configuration file '${OCF_RESKEY_config}' (during probe)"
      return ${OCF_SUCCESS}
    else
      ocf_log err "*::CheckConfig: Missing/unreadable configuration file '${OCF_RESKEY_config}'"
      return ${OCF_ERR_CONFIGURED}
    fi
  fi

  # Done
  return ${OCF_SUCCESS}
}

# Retrieve domain name from configuration file
# > stdout = domain name
LibvirtQemu_GetDomain() {
  local domain

  # Parse domain name out of configuration file
  domain="$(grep '<name>.*</name>' "${OCF_RESKEY_config}" | sed 's/^.*<name>\(.*\)<\/name>.*$/\1/' 2>/dev/null)"
  if [ -z "${domain}" ]; then
    ocf_log err "*::GetDomain: Failed to parse domain name from configuration file ('${OCF_RESKEY_config}')"
    return ${OCF_ERR_CONFIGURED}
  fi

  # Done
  echo "${domain}"
  return ${OCF_SUCCESS}
}

# Undefine previously 'virsh define'-d domain
LibvirtQemu_Undefine() {
  local rc
  local domain

  # Undefine domain
  for domain in $(virsh ${VIRSH_OPTIONS} list --all --name); do
    if [ "${domain}" == "${DOMAIN_NAME}" ]; then
      ocf_log warn "${DOMAIN_NAME}::Undefine: Domain is defined as persistent; undefining it (making it transient)"
      virsh ${VIRSH_OPTIONS} undefine ${DOMAIN_NAME} >/dev/null 2>&1 ; rc=$?
      [ ${rc} -ne 0 ] && ocf_log err "${DOMAIN_NAME}::Undefine: Failed to undefine domain [${rc}]"
      return ${rc}
    fi
  done

  # Done
  return 0
}

# Send e-mail
# ${1} = e-mail subject/body
LibvirtQemu_SendMail() {
  local rc
  local subject="${1}"

  # Send e-mail
  subject="${subject//%resource%/${OCF_RESOURCE_INSTANCE}}"
  subject="${subject//%domain%/${OCF_RESKEY_domain}}"
  ${MAILCMD} -s "${subject}" ${OCF_RESKEY_email_recipients} << EOF
  ${subject}
EOF
  rc=$?
  [ ${rc} -ne 0 ] && ocf_log warn "${DOMAIN_NAME}::SendMail: Failed to send e-mail [${rc}]"

  # Done
  return 0
}

LibvirtQemu_Status() {
  local rc
  local try=0
  local status

  # Check configuration (strict_config = off)
  if [ -z "${DOMAIN_NAME}" ]; then
    # Note: if configuration is erronous, domain can not have been started
    return ${OCF_NOT_RUNNING}
  fi

  # Check status
  rc=${OCF_ERR_GENERIC}
  status='no state'
  while [ "${status}" == 'no state' ]; do
    try=$(( ${try} + 1 ))
    status="$(virsh ${VIRSH_OPTIONS} domstate ${DOMAIN_NAME} 2>&1)"
    case "${status,,}" in
      *'domain not found'*|'shut off')
        # shut off: persistent domain is defined, but not started
        # domain not found: domain is not defined and thus not started
        ocf_log debug "${DOMAIN_NAME}::Status: Domain is currently in state '${status}'"
        rc=${OCF_NOT_RUNNING}
        ;;
      'running'|'paused'|'idle'|'in shutdown'|'blocked'|'pmsuspended')
        # running: domain is currently actively consuming cycles
        # paused: domain is paused (suspended)
        # idle: domain is running but idle
        # in shutdown: domain is being (gracefully) shut down
        # blocked: synonym for idle used by legacy Xen versions
        # pmsuspended: domain is ACPI-suspended
        ocf_log debug "${DOMAIN_NAME}::Status: Domain is currently in state '${status}'"
        rc=${OCF_SUCCESS}
        ;;
      ''|*'failed to '*'connect to the hypervisor'*|'no state')
        # Empty string may be returned when virsh does not
        # receive a reply from libvirtd.
        # "no state" may occur when the domain is currently
        # being migrated (on the migration target only), or
        # whenever virsh can't reliably obtain the domain
        # state.
        status='no state'
        if [ "${__OCF_ACTION}" == 'stop' ] && [ ${try} -ge 3 ]; then
          # During the stop operation, we want to bail out
          # quickly, so as to be able to force-stop (destroy)
          # the domain if necessary.
          ocf_log err "${DOMAIN_NAME}::Status: Domain has no state during stop operation; bailing out"
          return ${OCF_ERR_GENERIC};
        else
          # During all other actions, we just wait and try
          # again, relying on the CRM/LRM to time us out if
          # this takes too long.
          ocf_log info "${DOMAIN_NAME}::Status: Domain currently has no state; retrying"
          sleep 1
        fi
        ;;
      *)
        # any other output is unexpected.
        ocf_log err "${DOMAIN_NAME}::Status: Domain has unknown state '${status}'"
        ;;
    esac
  done

  # Done
  return ${rc}
}


## OCF actions
LibvirtQemu_Start() {
  local rc

  # Check configuration (strict_config = off)
  LibvirtQemu_CheckConfig ; rc=$?
  if [ ${rc} -ne ${OCF_SUCCESS} ]; then
    return ${rc}
  fi
  if [ -z "${DOMAIN_NAME}" ]; then
    return ${OCF_ERR_CONFIGURED}
  fi

  # Be idempotent
  LibvirtQemu_Status ; rc=$?
  if [ ${rc} -eq ${OCF_SUCCESS} ]; then
    ocf_log info "${DOMAIN_NAME}::Start: Domain already started"
    return ${OCF_SUCCESS}
  fi

  # We cannot 'virsh create' a domain that has been previously 'virsh defined' (better safe than sorry)
  LibvirtQemu_Undefine ; rc=$?
  [ ${rc} -ne 0 ] && return ${OCF_ERR_GENERIC}

  # Start the domain
  virsh ${VIRSH_OPTIONS} create "${OCF_RESKEY_config}" ; rc=$?
  if [ ${rc} -ne 0 ]; then
    ocf_log err "${DOMAIN_NAME}::Start: Failed to start domain [${rc}]"
    return ${OCF_ERR_GENERIC}
  fi

  # Wait for domain to start
  # NB: LRM will kill us based on action (meta-data) timeout
  while ! LibvirtQemu_Monitor; do
    sleep 1
  done

  # Send e-mail notification
  if [ -n "${OCF_RESKEY_email_recipients}" ]; then
    LibvirtQemu_SendMail "${OCF_RESKEY_email_subject} $(date +'%Y-%m-%d %H:%M:%S') START on $(uname -n)"
  fi

  # Done
  ocf_log info "${DOMAIN_NAME}::Start: Domain successfully started"
  return ${OCF_SUCCESS}
}

LibvirtQemu_Stop() {
  local rc
  local status
  local shutdown_timeout
  local out

  # Check configuration (strict_config = off)
  if [ -z "${DOMAIN_NAME}" ]; then
    # Note: if configuration is erronous, domain can not have been started
    return ${OCF_SUCCESS}
  fi

  # Stop domain (gracefully)
  LibvirtQemu_Status ; status=$?
  case ${status} in

    ${OCF_SUCCESS})
      # Domain is running; shut it down
      if ! ocf_is_true ${OCF_RESKEY_force_stop}; then

        # Issue a graceful shutdown request
        ocf_log info "${DOMAIN_NAME}::Stop: Issuing graceful shutdown request"
        virsh ${VIRSH_OPTIONS} qemu-monitor-command ${DOMAIN_NAME} --hmp sendkey esc  # For F*%&*% M$ Windaube!...
        virsh ${VIRSH_OPTIONS} shutdown ${DOMAIN_NAME} ; rc=$?
        if [ ${rc} -ne 0 ]; then
          ocf_log err "${DOMAIN_NAME}::Stop: Failed to stop (shutdown) domain [${rc}]"
          return ${OCF_ERR_GENERIC}
        fi

        # The "shutdown_timeout" we use here is the action timeout specified by the CIB (meta-data), minus 5 seconds
        shutdown_timeout=$(( ${SECONDS} + (${OCF_RESKEY_CRM_meta_timeout}/1000)-5 ))

        # Loop on status until we reach ${shutdown_timeout}
        while [ ${SECONDS} -lt ${shutdown_timeout} ]; do
          LibvirtQemu_Status ; status=$?
          case ${status} in
            ${OCF_NOT_RUNNING})
              # This was a graceful shutdown

              # Send e-mail notification
              if [ -n "${OCF_RESKEY_email_recipients}" ]; then
                LibvirtQemu_SendMail "${OCF_RESKEY_email_subject} $(date +'%Y-%m-%d %H:%M:%S') STOP (graceful) on $(uname -n)"
              fi

              # Done
              return ${OCF_SUCCESS}
              ;;
            ${OCF_SUCCESS})
              # Domain is still running, keep waiting (until shutdown_timeout expires)
              sleep 1
              ;;
            *)
              # Something went wrong. Bail out and resort to forced stop (destroy)
              break;
              ;;
          esac
        done

      fi
      ;;

    ${OCF_NOT_RUNNING})
      # Domain is not running
      ocf_log info "${DOMAIN_NAME}::Stop: Domain already stopped"
      return ${OCF_SUCCESS}
      ;;

  esac

  # Destroy domain (if that too does not work, have the LRM time us out)
  ocf_log info "${DOMAIN_NAME}::Stop: Issuing forced shutdown (destroy) request"
  out="$(virsh ${VIRSH_OPTIONS} destroy ${DOMAIN_NAME} 2>&1)" ; rc=$?
  case ${rc}${out,,} in
    *'domain is not running'*|*'domain not found'*)
      : # unexpected path to the intended outcome, all is well
      ;;
    [!0]*)
      ocf_log err "${DOMAIN_NAME}::Stop: Failed to stop (destroy) domain [${rc}]"
      return ${OCF_ERR_GENERIC}
      ;;
    0*)
      # NB: the LRM will time this out if it takes too long
      while [ ${status} != ${OCF_NOT_RUNNING} ]; do
        LibvirtQemu_Status ; status=$?
      done
      ;;
  esac

  # Send e-mail notification
  if [ -n "${OCF_RESKEY_email_recipients}" ]; then
    LibvirtQemu_SendMail "${OCF_RESKEY_email_subject} $(date +'%Y-%m-%d %H:%M:%S') STOP (forced) on $(uname -n)"
  fi

  # Done
  ocf_log info "${DOMAIN_NAME}::Stop: Domain successfully stopped"
  return ${OCF_SUCCESS}
}

LibvirtQemu_MigrateTo() {
  local rc
  local target_node
  local target_uri
  local transport_suffix
  local migrate_target
  local migrate_port
  local migrate_uri

  # Check configuration (strict_config = off)
  if [ -z "${DOMAIN_NAME}" ]; then
    return ${OCF_ERR_CONFIGURED}
  fi

  # Migrate domain (to)
  target_node="${OCF_RESKEY_CRM_meta_migrate_target}"
  if LibvirtQemu_Status; then
    # Find out the remote hypervisor to connect to.
    # That is, turn something like "qemu://foo:9999/system" into "qemu+tcp://bar:9999/system"
    if [ -n "${OCF_RESKEY_migration_transport}" ]; then
      transport_suffix="+${OCF_RESKEY_migration_transport}"
    fi
    # A typical migration URI via a special migration network looks like "tcp://bar-mig:49152".
    # The port would be randomly chosen by libvirt (>=0.7.4) from the range 49152-49215 if omitted.
    if [ -n "${OCF_RESKEY_migration_network_suffix}" ]; then
      # Hostname might be a FQDN
      migrate_target=$(echo ${target_node} | sed -e "s,^\([^.]\+\),\1${OCF_RESKEY_migration_network_suffix},")
      # For quiet ancient libvirt versions a migration port is needed and the URI must not contain the "//".
      # Newer versions can handle the "bad" URI.
      migrate_port=$(( 49152 + $(ocf_maybe_random) % 64 ))
      migrate_uri="tcp:${migrate_target}:${migrate_port}"
    fi
    target_uri="qemu${transport_suffix}://${target_node}/system"

    # OK, we know where to connect to. Now do the actual migration.
    ocf_log info "${DOMAIN_NAME}::MigrateTo: Migrating domain to node '${target_node}' ('${target_uri}' via '${migrate_uri}')"
    virsh ${VIRSH_OPTIONS} migrate --live ${DOMAIN_NAME} ${target_uri} ${migrate_uri} ; rc=$?
    if [ ${rc} -ne 0 ]; then
      ocf_log err "${DOMAIN_NAME}::MigrateTo: Migration of domain to node '${target_node}' ('${target_uri}' via '${migrate_uri}') failed [${rc}]"
      return ${OCF_ERR_GENERIC}
    fi
  else
    ocf_log err "${DOMAIN_NAME}::MigrateTo: Domain not active locally"
    return ${OCF_ERR_GENERIC}
  fi

  # Send e-mail notification
  if [ -n "${OCF_RESKEY_email_recipients}" ]; then
    LibvirtQemu_SendMail "${OCF_RESKEY_email_subject} $(date +'%Y-%m-%d %H:%M:%S') MIGRATE on $(uname -n) (to ${target_node})"
  fi

  # Done
  ocf_log info "${DOMAIN_NAME}::MigrateTo: Migration of domain to node '${target_node}' succeeded"
  return ${OCF_SUCCESS}
}

LibvirtQemu_MigrateFrom() {
  local rc

  # Check configuration (strict_config = off)
  if [ -z "${DOMAIN_NAME}" ]; then
    return ${OCF_ERR_CONFIGURED}
  fi

  # Migrate domain (from)
  # NB: LRM will kill us based on action (meta-data) timeout
  while ! LibvirtQemu_Monitor; do
    sleep 1
  done

  # Send e-mail notification
  if [ -n "${OCF_RESKEY_email_recipients}" ]; then
    LibvirtQemu_SendMail "${OCF_RESKEY_email_subject} $(date +'%Y-%m-%d %H:%M:%S') MIGRATE on $(uname -n) (from ${OCF_RESKEY_CRM_meta_migrate_source})"
  fi

  # Done
  ocf_log info "${DOMAIN_NAME}::MigrateFrom: Migration of domain from '${OCF_RESKEY_CRM_meta_migrate_source}' succeeded"
  return ${OCF_SUCCESS}
}

LibvirtQemu_Monitor() {
  local rc
  local script
  local script_output
  local script_rc

  # Check configuration (strict_config = off)
  if [ -z "${DOMAIN_NAME}" ]; then
    # Note: if configuration is erronous, domain can not have been started
    return ${OCF_NOT_RUNNING}
  fi

  # First, check the domain status.
  # If that returns anything other than ${OCF_SUCCESS}, something is definitely wrong.
  LibvirtQemu_Status ; rc=$?
  if [ ${rc} -eq ${OCF_SUCCESS} ]; then
    # OK, the generic status check turned out fine.
    # Now, if we have monitor scripts defined, run them one after another.
    for script in ${OCF_RESKEY_monitor_scripts}; do
      script_output="$(${script} 2>&1)" ; script_rc=$?
      if [ ${script_rc} -ne ${OCF_SUCCESS} ]; then
        # A monitor script returned a non-success exit code.
        # Stop iterating over the list of scripts, log a warning message, and propagate ${OCF_ERR_GENERIC}.
        ocf_log warn "${DOMAIN_NAME}::Monitor: Monitor script '${script}' failed; ${script_output} [${script_rc}]"
        rc=${OCF_ERR_GENERIC}
        break
      else
        ocf_log debug "${DOMAIN_NAME}::Monitor: Monitor script '${script}' succeeded; ${script_output}"
      fi
    done
  fi

  # Done
  return ${rc}
}

LibvirtQemu_ValidateAll() {
  local rc
  local binary

  # Required binaries
  for binary in virsh grep sed; do
    check_binary ${binary}
  done
  if [ -z "${MAILCMD}" ]; then
    ocf_log err "*::ValidateAll: MAILCMD variable not set"
    exit ${OCF_ERR_INSTALLED}
  fi
  check_binary "${MAILCMD}"

  # Check configuration
  LibvirtQemu_CheckConfig ; rc=$?
  if [ ${rc} -ne ${OCF_SUCCESS} ] && ocf_is_true ${OCF_RESKEY_strict_config}; then
    return ${rc}
  fi
  LibvirtQemu_GetDomain >/dev/null ; rc=$?
  if [ ${rc} -ne ${OCF_SUCCESS} ] && ocf_is_true ${OCF_RESKEY_strict_config}; then
    return ${rc}
  fi

  # Done
  return ${OCF_SUCCESS}
}


## Main

# Check arguments
if [ $# -ne 1 ]; then
  usage
  exit ${OCF_ERR_ARGS}
fi
ACTION="${1}"

# Non-actions
case ${ACTION,,} in
  'meta-data')
    meta_data
    exit ${OCF_SUCCESS}
    ;;
  'usage'|'help')
    usage
    exit ${OCF_SUCCESS}
    ;;
  'promote'|'demote'|'notify')
    exit ${OCF_ERR_UNIMPLEMENTED}
    ;;
esac

# Actual actions
LibvirtQemu_ValidateAll || exit $?
case ${ACTION,,} in
  'validate-all')
    ;;
  'start')
    LibvirtQemu_Start
    ;;
  'stop')
    LibvirtQemu_Stop
    ;;
  'migrate_to')
    LibvirtQemu_MigrateTo
    ;;
  'migrate_from')
    LibvirtQemu_MigrateFrom
    ;;
  'status')
    LibvirtQemu_Status
    ;;
  'monitor')
    LibvirtQemu_Monitor
      ;;
  *)
    usage
    exit ${OCF_ERR_ARGS}
    ;;
esac
exit $?


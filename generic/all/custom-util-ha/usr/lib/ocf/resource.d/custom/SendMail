#!/bin/bash
## CUSTOM-UTIL: File automatically created/updated [custom-util-ha]

# REF: http://www.linux-ha.org/doc/dev-guides/ra-dev-guide.html


## Initialization
: ${OCF_FUNCTIONS_DIR=${OCF_ROOT}/lib/heartbeat}
. ${OCF_FUNCTIONS_DIR}/ocf-shellfuncs


## Defaults
OCF_RESKEY_recipients_default='root'
: ${OCF_RESKEY_recipients:=${OCF_RESKEY_recipients_default}}
OCF_RESKEY_subject_default='[OCF:SendMail:%resource%]'
: ${OCF_RESKEY_subject:=${OCF_RESKEY_subject_default}}
OCF_RESKEY_strict_config_default=0
: ${OCF_RESKEY_strict_config:=${OCF_RESKEY_strict_config_default}}


## Usage
usage() {
  echo "USAGE: ${0##*/} {start|stop|status|monitor|meta-data|validate-all}"
}

meta_data() {
  cat <<END
<?xml version="1.0"?>
<!DOCTYPE resource-agent SYSTEM "ra-api-1.dtd">
<resource-agent name="SendMail">
  <version>1.1</version>

  <longdesc lang="en">
    Send resource status change e-mail to the given recipient(s).
    This resource ought to be grouped with other resource/primitive(s),
    as the last one in the group.
  </longdesc>
  <shortdesc lang="en">Send resource status change e-mail</shortdesc>

  <parameters>

    <parameter name="recipients" unique="0" required="1">
      <longdesc lang="en">
        Space-separated list of recipient(s) e-mail address(es).
      </longdesc>
      <shortdesc lang="en">Recipient(s) address(es)</shortdesc>
      <content type="string" default="${OCF_RESKEY_recipients_default}" />
    </parameter>

    <parameter name="subject">
      <longdesc lang="en">
        E-mail subject template.
        NOTE: The '%resource%' macro shall be replaced with the resource ID.
      </longdesc>
      <shortdesc lang="en">E-mail subject</shortdesc>
      <content type="string" default="${OCF_RESKEY_subject_default}" />
    </parameter>

    <parameter name="strict_config">
      <longdesc lang="en">
        Consider configuration errors as critical, prompting the cluster to
        fence the hosting node.
        WARNING! You MUST make sure the configuration is sane before enabling
        this option! Otherwise, the misconfigured resource will trigger fencing
        of each and every nodes as the cluster attempts to start it elsewhere
        (and fail systematically), leading to entire cluster failure.
      </longdesc>
      <shortdesc lang="en">Consider configuration errors critical</shortdesc>
      <content type="boolean" default="${OCF_RESKEY_strict_config_default}" />
    </parameter>

  </parameters>

  <actions>
    <action name="start" timeout="30" />
    <action name="stop" timeout="30" />
    <action name="monitor" depth="0" timeout="10" interval="60" />
    <action name="meta-data" timeout="5" />
    <action name="validate-all" timeout="5" />
  </actions>

</resource-agent>
END

  exit ${OCF_SUCCESS}
}


## Helpers
SendMail_CheckConfig() {
  local rc
  local out

  # Check recipients
  if [ -z "${OCF_RESKEY_recipients}" ]; then
    ocf_log err "*::CheckConfig: Missing/empty configuration parameter 'recipients'"
    return ${OCF_ERR_CONFIGURED}
  fi

  # Done
  return ${OCF_SUCCESS}
}

# Send e-mail
# ${1} = e-mail subject/body
SendMail_MailCmd() {
  local rc
  local subject="${1}"

  # Send e-mail
  subject="${subject//%resource%/${OCF_RESOURCE_INSTANCE}}"
  ${MAILCMD} -s "${subject}" ${OCF_RESKEY_recipients} << EOF
  ${subject}
EOF
  rc=$?
  [ ${rc} -ne 0 ] && ocf_log warn "${OCF_RESOURCE_INSTANCE}::SendMail: Failed to send e-mail [${rc}]"

  # Done
  return ${rc}
}

SendMail_Status() {
  local health

  # Check configuration (strict_config = off)
  if [ -z "${OCF_RESKEY_recipients}" ]; then
    # Note: if configuration is incomplete, resource can not have been started
    return ${OCF_NOT_RUNNING}
  fi

  # Return pseudo-resource status
  if ha_pseudo_resource ${HA_PSEUDO_RESOURCE} monitor; then
    return ${OCF_SUCCESS}
  else
    return ${OCF_NOT_RUNNING}
  fi

  # Done
  return ${OCF_ERR_GENERIC}
}


## OCF actions
SendMail_Start() {
  local rc

  # Check configuration (strict_config = off)
  if [ -z "${OCF_RESKEY_recipients}" ]; then
    return ${OCF_ERR_CONFIGURED}
  fi

  # Retrieve resource status
  SendMail_Status ; rc=$?
  if [ ${rc} -eq ${OCF_SUCCESS} ]; then
    ocf_log info "${OCF_RESOURCE_INSTANCE}::Start: Resource already started"
    return ${OCF_SUCCESS}
  fi

  # Send mail
  SendMail_MailCmd "${OCF_RESKEY_subject} $(date +'%Y-%m-%d %H:%M:%S') START on $(uname -n)" ; rc=$?
  if [ ${rc} -ne 0 ]; then
    return ${OCF_ERR_GENERIC}
  fi
  # ... start pseudo resource
  ha_pseudo_resource ${HA_PSEUDO_RESOURCE} start ; rc=$?
  if [ ${rc} -ne 0 ]; then
    return ${OCF_ERR_GENERIC}
  fi

  # Wait for resource to start
  # NB: LRM will kill us based on action (meta-data) timeout
  while true; do
    sleep 1
    SendMail_Status ; rc=$?
    if [ ${rc} -eq ${OCF_SUCCESS} ]; then
      break
    fi
  done

  # Done
  ocf_log debug "${OCF_RESOURCE_INSTANCE}::Start: Resource successfully started (e-mail sent)"
  return ${OCF_SUCCESS}
}

SendMail_Stop() {
  local rc

  # Check configuration (strict_config = off)
  if [ -z "${OCF_RESKEY_recipients}" ]; then
    # Note: if configuration is incomplete, resource can not have been started
    return ${OCF_SUCCESS}
  fi

  # Retrieve resource status
  SendMail_Status ; rc=$?
  if [ ${rc} -eq ${OCF_NOT_RUNNING} ]; then
    ocf_log info "${OCF_RESOURCE_INSTANCE}::Stop: Resource already stopped"
    return ${OCF_SUCCESS}
  fi

  # Send mail
  SendMail_MailCmd "${OCF_RESKEY_subject} $(date +'%Y-%m-%d %H:%M:%S') STOP on $(uname -n)" ; rc=$?
  if [ ${rc} -ne 0 ]; then
    return ${OCF_ERR_GENERIC}
  fi
  # ... stop pseudo resource
  ha_pseudo_resource ${HA_PSEUDO_RESOURCE} stop ; rc=$?
  if [ ${rc} -ne 0 ]; then
    return ${OCF_ERR_GENERIC}
  fi

  # Wait for resource to stop
  # NB: LRM will kill us based on action (meta-data) timeout
  while true; do
    sleep 1
    SendMail_Status ; rc=$?
    if [ ${rc} -eq ${OCF_NOT_RUNNING} ]; then
      break
    fi
  done

  # Done
  ocf_log debug "${OCF_RESOURCE_INSTANCE}::Stop: Resource successfully stopped (e-mail sent)"
  return ${OCF_SUCCESS}
}

SendMail_Monitor() {
  local rc

  # Retrieve resource status
  SendMail_Status ; rc=$?

  # Done
  return ${rc}
}

SendMail_ValidateAll() {
  local rc
  local binary

  # Required binaries
  for binary in ${MAILCMD}; do
    check_binary ${binary}
  done

  # Check configuration
  SendMail_CheckConfig ; rc=$?
  if [ ${rc} -ne ${OCF_SUCCESS} ] && ocf_is_true ${OCF_RESKEY_strict_config}; then
    return ${rc}
  fi

  # Done
  return ${OCF_SUCCESS}
}


## Main

# Check arguments
if [ $# -ne 1 ]; then
  usage
  exit ${OCF_ERR_ARGS}
fi
ACTION=${1}

# Non-actions
case ${ACTION,,} in
  'meta-data')
    meta_data
    exit ${OCF_SUCCESS}
    ;;
  'usage'|'help')
    usage
    exit ${OCF_SUCCESS}
    ;;
  'promote'|'demote'|'migrate_from'|'migrate_to'|'notify')
    exit ${OCF_ERR_UNIMPLEMENTED}
    ;;
esac

# Actual actions
HA_PSEUDO_RESOURCE="SendMail_${OCF_RESOURCE_INSTANCE}"
SendMail_ValidateAll || exit $?
case ${ACTION,,} in
  'validate-all')
    ;;
  'start')
    SendMail_Start
    ;;
  'stop')
    SendMail_Stop
    ;;
  'status')
    SendMail_Status
    ;;
  'monitor')
    SendMail_Monitor
    ;;
  *)
    usage
    exit ${OCF_ERR_ARGS}
    ;;
esac
exit $?


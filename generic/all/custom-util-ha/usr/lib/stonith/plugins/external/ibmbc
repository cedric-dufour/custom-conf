#!/bin/bash
## CUSTOM-UTIL: File automatically created/updated [custom-util-ha]

###############################################################################
# External STONITH module for IBM BladeCenter (SNMPv3)
# 2014.07.08 <http://cedric.dufour.name>
###############################################################################

# Command-line arguments
[ $# -lt 1 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} <action> <hostname>

WHERE:
  Actions MUST be one of the following:
    query            - Query the power state for the given host.
    on               - Switch the given host on.
    off              - Switch the given host off.
    reset            - Reset the given host.
    gethosts         - Return the list of hosts configured.
    status           - Exit with return code zero if this device can be reached,
                       non-zero if this device cannot be reached.
    getconfignames   - Return the list of mandatory environment variables that
                       needs to be configured.
    getinfo-devid    - Return the device class.
    getinfo-devname  - Return the device name.
    getinfo-devdescr - Return the description of this device.
    getinfo-devurl   - Return a URL pointing to more information on this device.
    getinfo-xml      - Return an XML fragment defining all of the parameters
                       and their descriptions.

REFERENCE:
  See http://www.linux-ha.org/ExternalStonithPlugins
EOF

# Arguments
ARG_ACTION="$1"
ARG_HOSTNAME="$2"

# OIDs
OID_IBMBC_SIG='.1.3.6.1.2.1.1.1.0'
OID_IBMBC_SIG_CHECK='BladeCenter Advanced Management Module'
OID_IBMBC_NAME_PREFIX='.1.3.6.1.4.1.2.3.51.2.22.1.6.1.1.6'
OID_IBMBC_STATE_PREFIX='.1.3.6.1.4.1.2.3.51.2.22.1.6.1.1.4'
OID_IBMBC_POWER_PREFIX='.1.3.6.1.4.1.2.3.51.2.22.1.6.1.1.7'

# Values
VAL_IBMBC_STATE_OFF=0
VAL_IBMBC_STATE_ON=1
VAL_IBMBC_STATE_SOFTOFF=2
VAL_IBMBC_STATE_STANDBY=3
VAL_IBMBC_STATE_HIBERNATE=4

# Set the SNMP configuration directory path
export SNMPCONFPATH="${snmp_conf_path}"

# Useful function
function _devchk() {
  [ -z "${mgmt_address}" ] && echo "ERROR: Missing the device management IP address or hostname (mgmt_address)" >&2 && return 1
  [ -z "${snmp_conf_path}" ] && echo "ERROR: Missing the SNMP configuration directory path (snmp_conf_path)" >&2 && return 1
  [ ! -d "${snmp_conf_path}" ] && echo "ERROR: Invalid SNMP configuration directory path (${snmp_conf_path})" >&2 && return 1
  [ ! -r "${snmp_conf_path}/snmp.conf" ] && echo "ERROR: Missing the SNMP configuration file (${snmp_conf_path}/snmp.conf)" >&2 && return 1
  [ -z "$(which snmpwalk)" ] && echo "ERROR: Missing SNMP binary (snmpwalk)" >&2 && return 1
  [ -z "$(which snmpget)" ] && echo "ERROR: Missing SNMP binary (snmpget)" >&2 && return 1
  [ -z "$(which snmpset)" ] && echo "ERROR: Missing SNMP binary (snmpset)" >&2 && return 1
  sig="$(snmpget -m '' -t 5 -r 15 -Ov -Oq ${mgmt_address} ${OID_IBMBC_SIG} | sed 's|"||g')"
  [ $? -ne 0 ] && echo "ERROR: Failed to retrieve SNMP device signature" >&2 && return 1
  [ "${sig,,}" != "${OID_IBMBC_SIG_CHECK,,}" ] && echo "ERROR: Invalid device signature (${sig})" >&2 && return 1
  return 0
}

function _gethosts() {
  labels=$(snmpwalk -m '' -t 5 -Ov -Oq ${mgmt_address} ${OID_IBMBC_NAME_PREFIX} | sed 's|^"\([^(]*(\)*||;s|\()[^)]*\)*"$||;s| |_|g')
  [ ${PIPESTATUS[0]} -ne 0 ] && echo "ERROR: Failed to retrieve label list" >&2 && return 1
  for label in ${labels}; do
    echo ${label}
  done | uniq
  return 0
}

function _getoids() {
  labels=$(snmpwalk -m '' -t 5 -On -Oq ${mgmt_address} ${OID_IBMBC_NAME_PREFIX} | sed 's|^\([^ ]*\) "\([^(]*(\)*|\1:|;s|\()[^)]*\)*"$||;s| |_|g')
  [ ${PIPESTATUS[0]} -ne 0 ] && echo "ERROR: Failed to retrieve label list" >&2 && return 1
  found=0
  for label in ${labels}; do
    oid=${label%:*}
    label=${label#*:}
    [ "${label}" != "${ARG_HOSTNAME}" ] && continue
    found=1
    echo ${oid##*.}
  done
  [ ${found} -eq 0 ] && echo "ERROR: No outlet matches the given label (${ARG_HOSTNAME})" >&2 && return 1
  return 0
}

function _query() {
  oids=$(_getoids ${ARG_HOSTNAME}); [ -z "${oids}" ] && return 1
  for oid in ${oids}; do
    state=$(snmpget -m '' -t 5 -Ov -Oq ${mgmt_address} ${OID_IBMBC_STATE_PREFIX}.${oid})
    [ $? -ne 0 ] && echo "ERROR: Failed to retrieve SNMP value" >&2 && return 1
    case ${state} in
      ${VAL_IBMBC_STATE_OFF}) echo 'OFF';;
      ${VAL_IBMBC_STATE_ON}|${VAL_IBMBC_STATE_STANDBY}|${VAL_IBMBC_STATE_HIBERNATE}) echo 'ON';;
      *) echo "Unknown power state (${state})";;
    esac
  done
  return 0
}

function _on() {
  oids=$(_getoids ${ARG_HOSTNAME}); [ -z "${oids}" ] && return 1
  for oid in ${oids}; do
    state=$(snmpget -m '' -t 5 -Ov -Oq ${mgmt_address} ${OID_IBMBC_STATE_PREFIX}.${oid})
    [ $? -ne 0 ] && echo "ERROR: Failed to retrieve SNMP value" >&2 && return 1
    [ "${state}" == "${VAL_IBMBC_STATE_ON}" ] && continue
    snmpset -m '' -t 5 ${mgmt_address} ${OID_IBMBC_POWER_PREFIX}.${oid} i ${VAL_IBMBC_STATE_ON} >/dev/null
    [ $? -ne 0 ] && echo "ERROR: Failed to send SNMP command (ON)" >&2 && return 1
    for t in {1..60}; do
      state=$(snmpget -m '' -t 5 -r 1 -Ov -Oq ${mgmt_address} ${OID_IBMBC_STATE_PREFIX}.${oid})
      [ $? -ne 0 ] && echo "WARNING: Failed to retrieve SNMP value" >&2 && continue
      [ "${state}" == "${VAL_IBMBC_STATE_ON}" ] && break
      sleep 1
    done
    [ "${state}" != "${VAL_IBMBC_STATE_ON}" ] && echo "ERROR: Failed to switch the server off (${ARG_HOSTNAME})" >&2 && return 1
  done
  return 0
}

function _off() {
  oids=$(_getoids ${ARG_HOSTNAME}); [ -z "${oids}" ] && return 1
  for oid in ${oids}; do
    state=$(snmpget -m '' -t 5 -Ov -Oq ${mgmt_address} ${OID_IBMBC_STATE_PREFIX}.${oid})
    [ $? -ne 0 ] && echo "ERROR: Failed to retrieve SNMP value" >&2 && return 1
    [ "${state}" == "${VAL_IBMBC_STATE_OFF}" ] && continue
    if [ "${no_softoff:-0}" == '0' ]; then
      snmpset -m '' -t 5 ${mgmt_address} ${OID_IBMBC_POWER_PREFIX}.${oid} i ${VAL_IBMBC_STATE_SOFTOFF} >/dev/null
      [ $? -ne 0 ] && echo "ERROR: Failed to send SNMP command (SOFTOFF)" >&2 && return 1
      for t in {1..30}; do
        state=$(snmpget -m '' -t 5 -r 1 -Ov -Oq ${mgmt_address} ${OID_IBMBC_STATE_PREFIX}.${oid})
        [ $? -ne 0 ] && echo "WARNING: Failed to retrieve SNMP value" >&2 && continue
        [ "${state}" == "${VAL_IBMBC_STATE_OFF}" ] && break
        sleep 1
      done
      [ "${state}" == "${VAL_IBMBC_STATE_OFF}" ] && continue
    fi
    snmpset -m '' -t 5 ${mgmt_address} ${OID_IBMBC_POWER_PREFIX}.${oid} i ${VAL_IBMBC_STATE_OFF} >/dev/null
    [ $? -ne 0 ] && echo "ERROR: Failed to send SNMP command (OFF)" >&2 && return 1
    for t in {1..60}; do
      state=$(snmpget -m '' -t 5 -r 1 -Ov -Oq ${mgmt_address} ${OID_IBMBC_STATE_PREFIX}.${oid})
      [ $? -ne 0 ] && echo "WARNING: Failed to retrieve SNMP value" >&2 && continue
      [ "${state}" == "${VAL_IBMBC_STATE_OFF}" ] && break
      sleep 1
    done
    [ "${state}" != "${VAL_IBMBC_STATE_OFF}" ] && echo "ERROR: Failed to switch the server off (${ARG_HOSTNAME})" >&2 && return 1
  done
  return 0
}

# Execute action
case ${ARG_ACTION} in
query)
  _query || exit 1
  exit 0
  ;;

on)
  _on || exit 1
  exit 0
  ;;

off)
  _off || exit 1
  exit 0
  ;;

reset)
  _off || exit 1
  sleep 1
  _on || exit 1
  exit 0
  ;;

gethosts)
  _gethosts || exit 1
  exit 0
  ;;

status)
  _devchk || exit 1
  exit 0
  ;;

getconfignames)
  echo "mgmt_address"
  echo "snmp_conf_path"
  echo "no_softoff"
  exit 0
  ;;

getinfo-devid)
  echo "IBM BladeCenter STONITH device"
  exit 0
  ;;

getinfo-devname)
  echo "IBM BladeCenter STONITH device (${snmp_conf_path})"
  exit 0
  ;;

getinfo-devdescr)
  echo "IBM BladeCenter's STONITH device via SNMPv3"
  exit 0
  ;;

getinfo-devurl)
  echo 'http://www.ibm.com/'
  exit 0
  ;;

getinfo-xml)
  cat << EOF
<parameters>

<parameter name="mgmt_address" unique="1" required="1">
<content type="string" />
<shortdesc lang="en">
Management Address (or Hostname)
</shortdesc>
<longdesc lang="en">
The IP address or hostname for the IBM BladeCenter (AMM).
</longdesc>
</parameter>

<parameter name="snmp_conf_path" unique="1" required="1">
<content type="string" />
<shortdesc lang="en">
SNMP Configuration Directory Path
</shortdesc>
<longdesc lang="en">
The path to the directory containing the 'snmp.conf' configuration file to
access the IBM BladeCenter (AMM).
See 'man snmp_config' and 'man snmp.conf' for details.
</longdesc>
</parameter>

<parameter name="no_softoff" unique="1" required="0">
<content type="integer" default="0" />
<shortdesc lang="en">
Do not use SOFTOFF power state to switch host off
</shortdesc>
<longdesc lang="en">
Do not use the SOFTOFF (2) power state when switching host(s) off.
On some systems (eg. IBM BladeServer HX5), power states do not correspond
to documentation: SOFTOFF becomes SOFTRECYCLE and OFF becomes SOFTOFF.
In order to STONITH to work as expected, power 'cycling' SHOULD NOT be used.
</longdesc>
</parameter>

</parameters>
EOF
  exit 0
  ;;

*)
  echo "ERROR: Invalid action (${ARG_ACTION})" >&2 && exit 1
  exit 1
  ;;

esac


#!/bin/bash
SCRIPT="${0##*/}"

## Usage
__USAGE() {
  cat <<EOF
USAGE: ${SCRIPT} [<options>] <zfs-src> <[host:]zfs-dst>

SYSNOPSIS:
  Backup the given ZFS source dataset to the given destination dataset,
  optionally on the given host (via SSH), using ZFS send/receive stanza
  and automatically managed snapshots.

OPTIONS:

  -I --init
    Initialize the backup (perform the first snapshot/backup).

  -P --previous
    Specify the previous snapshot to use (default is automatically detected)

  -R --read-only
    Switch the destination dataset to read-only mode after backup.

  -U --user <username>
    Login name for remote (SSH) hosts

  -V --verbose
    Verbose dataset stream transfer

  -D --dry-run
    Simulate dataset stream transfer; no backup is actually performed

  --no-replication
    Disable full dataset replication; previous destination backup snapshots
    are preserved

EOF
}
[ $# -lt 2 ] && __USAGE && exit 1

# Arguments
ZFS_BACKUP_SRC=
ZFS_BACKUP_DST=
ZFS_BACKUP_HOST=
ZFS_BACKUP_INIT=
ZFS_BACKUP_SNAPSHOT_PREV=
ZFS_BACKUP_RDONLY=
ZFS_BACKUP_USER="$(whoami)"
ZFS_BACKUP_VERBOSE=
ZFS_BACKUP_DRYRUN=
ZFS_BACKUP_REPL='yes'
while [ -n "${1}" ]; do
  case "${1}" in
    'help'|'--help'|'-h')
      __USAGE
      exit 1
      ;;

    '-I'|'--init')
      ZFS_BACKUP_INIT='yes'
      ;;

    '-P'|'--previous')
      [ -z "${2}" ] && echo "ERROR[${SCRIPT}]: Missing option argument (${1})" >&2 && exit 1
      ZFS_BACKUP_SNAPSHOT_PREV="${2}"; shift
      ;;

    '-R'|'--read-only')
      ZFS_BACKUP_RDONLY='yes'
      ;;

    '-U'|'--user')
      [ -z "${2}" ] && echo "ERROR[${SCRIPT}]: Missing option argument (${1})" >&2 && exit 1
      ZFS_BACKUP_USER="${2}"; shift
      ;;

    '-V'|'--verbose')
      ZFS_BACKUP_VERBOSE='yes'
      ;;

    '-D'|'--dry-run')
      ZFS_BACKUP_DRYRUN='yes'
      ZFS_BACKUP_VERBOSE='yes'
      ;;

    '--no-replication')
      ZFS_BACKUP_REPL=
      ;;

    -*)
      echo "ERROR[${SCRIPT}]: Invalid option (${1})" >&2 && exit 1
      ;;

    *)
      if [ -z "${ZFS_BACKUP_SRC}" ]; then
        ZFS_BACKUP_SRC="${1}"
      elif [ -z "${ZFS_BACKUP_DST}" ]; then
        ZFS_BACKUP_HOST="${1%:*}"
        ZFS_BACKUP_DST="${1#*:}"
        [ "${ZFS_BACKUP_HOST}" == "${ZFS_BACKUP_DST}" ] && ZFS_BACKUP_HOST=localhost
      else
        echo "ERROR[${SCRIPT}]: Too many arguments (${1})" >&2 && exit 1
      fi
      ;;
  esac
  shift
done


## Parameters
ZFS_BACKUP_NAME="${ZFS_BACKUP_SRC//\//_}/${ZFS_BACKUP_HOST}:${ZFS_BACKUP_DST//\//_}"


## Check
[ -z "${ZFS_BACKUP_SRC}" ] && echo "ERROR[${SCRIPT}]: Missing source dataset" >&2 && exit 1
[ -z "${ZFS_BACKUP_DST}" ] && echo "ERROR[${SCRIPT}]: Missing destination dataset" >&2 && exit 1


## Main

# Retrieve backup snaphosts list

# (list)
if [ -z "${ZFS_BACKUP_SNAPSHOT_PREV}" ]; then
  ZFS_BACKUP_SNAPSHOTS="$(zfs list -Hp -t snapshot -r "${ZFS_BACKUP_SRC}" | cut -f1 | grep -E "@[0-9]{8}T[0-9]{6}-backup:${ZFS_BACKUP_HOST}:${ZFS_BACKUP_DST//\//_}\$" | sort)"
else
  ZFS_BACKUP_SNAPSHOTS="$(zfs list -Hp -t snapshot -r "${ZFS_BACKUP_SRC}" | cut -f1 | grep -E "^${ZFS_BACKUP_SNAPSHOT_PREV}\$" | sort)"
fi
[ "$(echo "${ZFS_BACKUP_SNAPSHOTS}" | wc -l)" -gt 1 ] && echo "ERROR[${SCRIPT}]: Too many snapshots found (${ZFS_BACKUP_NAME})" >&2 && exit 1

# (previous)
ZFS_BACKUP_SNAPSHOT_PREV="${ZFS_BACKUP_SNAPSHOTS}"
[ -z "${ZFS_BACKUP_SNAPSHOT_PREV}" ] && [ -z "${ZFS_BACKUP_INIT}" ] && echo "ERROR[${SCRIPT}]: No previous snapshot found (${ZFS_BACKUP_NAME})" >&2 && exit 1
[ -n "${ZFS_BACKUP_SNAPSHOT_PREV}" ] && [ -n "${ZFS_BACKUP_INIT}" ] && echo "ERROR[${SCRIPT}]: Previous snapshot found; can not initialize (${ZFS_BACKUP_NAME})" >&2 && exit 1
ZFS_BACKUP_SNAPSHOT_PREV_DST="${ZFS_BACKUP_DST}@${ZFS_BACKUP_SNAPSHOT_PREV#*@}"

# (encryption)
ZFS_BACKUP_SRC_ENCRYPTED="$(zfs get -Ho value encryption "${ZFS_BACKUP_SRC}" 2>/dev/null)"
[ "${ZFS_BACKUP_SRC_ENCRYPTED}" == 'off' ] && ZFS_BACKUP_SRC_ENCRYPTED=

# Create backup snapshot
ZFS_BACKUP_TIMESTAMP="$(date +'%Y%m%dT%H%M%S')"
ZFS_BACKUP_SNAPSHOT_NOW="${ZFS_BACKUP_SRC}@${ZFS_BACKUP_TIMESTAMP}-backup:${ZFS_BACKUP_HOST}:${ZFS_BACKUP_DST//\//_}"
if ! zfs snapshot -r "${ZFS_BACKUP_SNAPSHOT_NOW}"; then
  echo "ERROR[${SCRIPT}]: Failed to perform source snapshot (${ZFS_BACKUP_NAME})" >&2
  exit 1
fi

# Perform backup

# (commands)
ZFS_BACKUP_SET_RDWR="zfs set readonly=off ${ZFS_BACKUP_DST}"
ZFS_BACKUP_SEND="zfs send -p ${ZFS_BACKUP_REPL:+-R} ${ZFS_BACKUP_SRC_ENCRYPTED:+-w} ${ZFS_BACKUP_VERBOSE:+-v} ${ZFS_BACKUP_SNAPSHOT_PREV:+-I} ${ZFS_BACKUP_SNAPSHOT_PREV} ${ZFS_BACKUP_SNAPSHOT_NOW}"
ZFS_BACKUP_RECV="zfs receive -F ${ZFS_BACKUP_VERBOSE:+-v} ${ZFS_BACKUP_DRYRUN:+-n} ${ZFS_BACKUP_DST}"
ZFS_BACKUP_SET_RDONLY="zfs set readonly=on ${ZFS_BACKUP_DST}"
if [ "${ZFS_BACKUP_HOST}" != 'localhost' ]; then
  ZFS_BACKUP_SET_RDWR="ssh -l ${ZFS_BACKUP_USER} ${ZFS_BACKUP_HOST} '${ZFS_BACKUP_SET_RDWR}'"
  ZFS_BACKUP_RECV="ssh -l ${ZFS_BACKUP_USER} ${ZFS_BACKUP_HOST} '${ZFS_BACKUP_RECV}'"
  ZFS_BACKUP_SET_RDONLY="ssh -l ${ZFS_BACKUP_USER} ${ZFS_BACKUP_HOST} '${ZFS_BACKUP_SET_RDONLY}'"
fi

# (set destination dataset read-write)
if [ -z "${ZFS_BACKUP_INIT}" ]; then
  if ! eval "${ZFS_BACKUP_SET_RDWR}"; then
    echo "ERROR[${SCRIPT}]: Failed to switch destination to read-write mode (${ZFS_BACKUP_NAME})" >&2
    zfs destroy "${ZFS_BACKUP_SNAPSHOT_NOW}"
    exit 1
  fi
fi

# (send/receive dataset stream)
if ! eval "${ZFS_BACKUP_SEND} | ${ZFS_BACKUP_RECV}"; then
  echo "ERROR[${SCRIPT}]: Failed to perform backup for given source/destination (${ZFS_BACKUP_NAME})" >&2
  zfs destroy "${ZFS_BACKUP_SNAPSHOT_NOW}"
  exit 1
fi

# (set destination dataset read-only)
if [ -n "${ZFS_BACKUP_RDONLY}" ]; then
  if ! eval "${ZFS_BACKUP_SET_RDONLY}"; then
    echo "WARNING[${SCRIPT}]: Failed to switch destination to read-only mode (${ZFS_BACKUP_NAME})" >&2
  fi
fi

# Destroy unnecessary snaphots
if [ -n "${ZFS_BACKUP_DRYRUN}" ]; then
  if ! zfs destroy "${ZFS_BACKUP_SNAPSHOT_NOW}"; then
    echo "WARNING[${SCRIPT}]: Failed to destroy source snapshot (${ZFS_BACKUP_SNAPSHOT_NOW})" >&2
  fi
elif [ -z "${ZFS_BACKUP_INIT}" ]; then
  if ! zfs destroy "${ZFS_BACKUP_SNAPSHOT_PREV}"; then
    echo "WARNING[${SCRIPT}]: Failed to destroy previous (source) snapshot (${ZFS_BACKUP_SNAPSHOT_PREV})" >&2
  fi
  if [ "${ZFS_BACKUP_HOST}" != 'localhost' ]; then
    if ! ssh -l "${ZFS_BACKUP_USER}" "${ZFS_BACKUP_HOST}" "zfs destroy '${ZFS_BACKUP_SNAPSHOT_PREV_DST}'"; then
      echo "WARNING[${SCRIPT}]: Failed to destroy previous (destination) snapshot (${ZFS_BACKUP_SNAPSHOT_PREV_DST})" >&2
    fi
  elif [ "${ZFS_BACKUP_DST}" != "${ZFS_BACKUP_SRC}" ]; then
    if ! zfs destroy "${ZFS_BACKUP_SNAPSHOT_PREV_DST}"; then
      echo "WARNING[${SCRIPT}]: Failed to destroy previous (destination) snapshot (${ZFS_BACKUP_SNAPSHOT_PREV_DST})" >&2
    fi
  fi
fi

# Done
exit 0

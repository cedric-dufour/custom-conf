#!/bin/bash
## CUSTOM-UTIL: File automatically created/updated [custom-util-skel]

## Usage
[ "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} [options]

SYNOPSIS:
  Create local user-dedicated temporary directory and relocate all
  non-critical resources (web cache, thumbnails cache, etc.) to
  that directory.

OPTIONS:
  --home <absolute-directory-path>
    Specify home directory absolute path
    (default: ${HOME})

  --user <username>
    Specify alternate username (for permissions setting)
    (default: ${USER})

  --tmp <absolute-directory-path>
    Specify temporary (local) directory absolute path
    (default: /local/scratch or /tmp)

  --dry-run
    Only show potentially mis-permissioned (existing) files

  --verbose
    Output additonal debug/informational messages.
EOF

# Arguments
MY_HOME="${HOME}"
MY_USER="${USER}"
TMPROOT=
DRYRUN=
VERBOSE=
while [ -n "${1}" ]; do
  case "${1}" in
    '--home')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      shift; MY_HOME="${1}"
      ;;
    '--user')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      shift; MY_USER="${1}"
      ;;
    '--tmp')
      [ -z "${2}" ] && echo "ERROR: Missing option argument (${1})" >&2 && exit 1
      shift; TMPROOT="${1}"
      ;;
    '--dry-run')
      DRYRUN='yes'
      ;;
    '--verbose')
      VERBOSE='yes'
      ;;
    *)
      echo "ERROR: Invalid option (${1})" >&2 && exit 1
  esac
  shift
done


## Create the local temporary directory
[ -n "${VERBOSE}" ] && echo "DEBUG: ${0##*/} BEGIN"

# Define/check the parent (root) directory
if [ -z "${TMPROOT}" ]; then
  [ -e '/local/scratch' ] && TMPROOT='/local/scratch' || TMPROOT='/tmp'
fi
[ ! -d "${TMPROOT}" ] && echo "ERROR: Invalid path; not a directory (${TMPROOT})" >&2 && exit 1

# Define/create/check the user directory
TMPDIR="${TMPROOT}/${MY_USER}"
[ ! -e "${TMPDIR}" ] && mkdir "${TMPDIR}"
[ ! -d "${TMPDIR}" ] && echo "ERROR: Failed to create directory (${TMPDIR})" >&2 && exit 1
[ ! -w "${TMPDIR}" ] && echo "ERROR: Non-writable directory (${TMPDIR})" >&2 && exit 1

# Export environment variables
export TMPROOT
export TMPDIR

# Set proper ownership and permissions
chown "${MY_USER}" "${TMPDIR}"
chmod go= "${TMPDIR}"


## Generic relocate function
function _relocate_resource {  # <home-relative-directory>:<type=dir|file>
  # Arguments
  resource="${1%:*}"
  resource_type="${1#*:}"
  [ "${resource}" == "${resource_type}" ] && echo "ERROR: Invalid resource syntax (${resource})" >&2 && return 1
  resource_home_path="${MY_HOME}/${resource}"
  resource_home_dir="$(dirname "${resource_home_path}")"
  resource_tmp_path="${TMPDIR}/${resource}"
  resource_tmp_dir="$(dirname "${resource_tmp_path}")"
  [ -n "${VERBOSE}" ] && echo "DEBUG: Checking resource (${resource_home_path})"

  # Initial check
  [ -h "${resource_home_path}" -a -e "${resource_home_path}" ] && return 0
  [ -n "${DRYRUN}" ] && echo "DRY-RUN: NOT relocating resource (${resource_home_path})" && return 0
  echo "INFO: Relocating resource (${resource_home_path})"
  
  # Check (parent) directory
  # ... home
  [ ! -e "${resource_home_dir}" ] && mkdir -p "${resource_home_dir}"
  [ ! -d "${resource_home_dir}" ] && echo "ERROR: Failed to create directory (${resource_home_dir})" >&2 && return 1
  [ ! -w "${resource_home_dir}" ] && echo "ERROR: Non-writable directory (${resource_home_dir})" >&2 && return 1
  # ... tmp
  [ ! -e "${resource_tmp_dir}" ] && mkdir -p "${resource_tmp_dir}"
  [ ! -d "${resource_tmp_dir}" ] && echo "ERROR: Failed to create directory (${resource_tmp_dir})" >&2 && return 1
  [ ! -w "${resource_tmp_dir}" ] && echo "ERROR: Non-writable directory (${resource_tmp_dir})" >&2 && return 1

  # Check/relocate resource
  if [ -h "${resource_home_path}" ]; then
    echo "WARNING: Resource relocated but broken (${resource_home_path}); creating new version" >&2
    rm -f "${resource_home_path}"
    [ $? -ne 0 ] && echo "ERROR: Failed to delete resource (${resource_home_path})" >&2 && return 1
    echo "INFO: Resource successfully deleted (${resource_home_path})"
  fi
  if [ -e "${resource_tmp_path}" ]; then
    echo "INFO: Resource already relocated (${resource_tmp_path})"
    if [ -e "${resource_home_path}" ]; then
      echo "WARNING: Resource is duplicated (${resource}); discarding home-located version" >&2
      rm -rf "${resource_home_path}"
      [ $? -ne 0 ] && echo "ERROR: Failed to delete resource (${resource_home_path})" >&2 && return 1
      echo "INFO: Resource successfully deleted (${resource_home_path})"
    fi
  elif [ -e "${resource_home_path}" ]; then
    mv "${resource_home_path}" "${resource_tmp_path}"
    [ $? -ne 0 ] && echo "ERROR: Failed to move resource (${resource_home_path} -> ${resource_tmp_path})" >&2 && return 1
    echo "INFO: Resource successfully relocated (${resource_tmp_path})"
  else
    case "${resource_type}" in
      'dir')
        mkdir "${resource_tmp_path}"
        ;;
      'file')
        touch "${resource_tmp_path}"
        ;;
      *)
        echo "ERROR: Invalid resource type (${resource_type})" >&2 && return 1
        ;;
    esac
    [ $? -ne 0 ] && echo "ERROR: Failed to create resource (${resource_tmp_path}:${resource_type})" >&2 && return 1
    echo "INFO: Resource successfully created (${resource_tmp_path}:${resource_type})"
  fi  
  ln -s "${resource_tmp_path}" "${resource_home_path}"
  [ $? -ne 0 ] && echo "ERROR: Failed to symlink resource (${resource_home_path} -> ${resource_tmp_path})" >&2 && return 1
  echo "INFO: Resource successfully symlinked (${resource_home_path})"

  # Done
  return 0
}


## Relocate resources
cd "${MY_HOME}"
[ $? -ne 0 ] && echo "ERROR: Failed to swicth to home directory (${MY_HOME})" >&2 && exit 1
IFS=$'\n'

# Easy ones
for resource in \
  '.cache:dir' \
  '.config/chromium/ShaderCache:dir' \
  '.config/chromium/Temp:dir' \
  '.config/google-chrome/ShaderCache:dir' \
  '.config/google-chrome/Temp:dir' \
  '.config/libreoffice/4/cache:dir' \
  '.config/libreoffice/4/user/uno_packages/cache:dir' \
  '.config/libreoffice/4/user/extensions/bundled:dir' \
  '.config/libreoffice/4/user/extensions/tmp:dir' \
  '.mozilla/firefox/custom.default/startupCache:dir' \
  '.mozilla/firefox/custom.default/thumbnails:dir' \
  '.mozilla/firefox/custom.default/netpredictions.sqlite:file' \
  '.mozilla/firefox/custom.default/urlclassifier3.sqlite:file' \
  '.mozilla/firefox/custom.default/urlclassifier.pset:file' \
  '.mozilla/firefox/custom.default/XPC.mfasl:file' \
  '.mozilla/firefox/custom.default/XUL.mfasl:file' \
  '.openoffice/4/user/temp:dir' \
  '.openoffice/4/user/uno_packages/cache:dir' \
  '.openoffice/4/user/extensions/bundled:dir' \
  '.openoffice/4/user/extensions/tmp:dir' \
  '.thumbnails:dir' \
  '.thunderbird/custom.default/ImapMail:dir' \
  '.thunderbird/custom.default/urlclassifier3.sqlite:file' \
  '.thunderbird/custom.default/urlclassifier.pset:file' \
  '.thunderbird/custom.default/XPC.mfasl:file' \
  '.thunderbird/custom.default/XUL.mfasl:file' \
; do
  _relocate_resource "${resource}"
done

# Shitty ones
# ... Thunderbird; thanks Mozilla for its sensible approach to storage management...
for profile in $(find '.thunderbird/' -maxdepth 2 -type f -name 'prefs.js'); do
  profile="$(dirname "${profile}")"
  for resource in \
  "${profile}/ImapMail:dir" \
  "${profile}/urlclassifier3.sqlite:file" \
  "${profile}/urlclassifier.pset:file" \
  "${profile}/XPC.mfasl:file" \
  "${profile}/XUL.mfasl:file" \
  ; do
    _relocate_resource "${resource}"
  done
done
for resource in $(find '.thunderbird/' "${TMPDIR}/.thunderbird/" -maxdepth 2 -type d \( -name 'Cache' -o -name 'OfflineCache' \) ); do
  # (those resources are relocated via /etc/thunderbird/pref/thunderbird.js)
  rm -rf "${resource}"
  [ $? -ne 0 ] && echo "ERROR: Failed to delete resource (${resource})" >&2 && continue
  echo "INFO: Resource successfully deleted (${resource})"
done
# ... Firefox; thanks Mozilla for its sensible approach to storage management...
for profile in $(find '.mozilla/firefox/' -maxdepth 2 -type f -name 'prefs.js'); do
  profile="$(dirname "${profile}")"
  for resource in \
    "${profile}/startupCache:dir" \
    "${profile}/netpredictions.sqlite:file" \
    "${profile}/urlclassifier3.sqlite:file" \
    "${profile}/urlclassifier.pset:file" \
    "${profile}/XPC.mfasl:file" \
    "${profile}/XUL.mfasl:file" \
  ; do
    _relocate_resource "${resource}"
  done
done
for resource in $(find '.mozilla/firefox/' "${TMPDIR}/.mozilla/firefox/" -maxdepth 2 -type d \( -name 'Cache' -o -name 'OfflineCache' \) ); do
  # (those resources are relocated via /etc/firefox/pref/firefox.js)
  rm -rf "${resource}"
  [ $? -ne 0 ] && echo "ERROR: Failed to delete resource (${resource})" >&2 && continue
  echo "INFO: Resource successfully deleted (${resource})"
done


## Done
[ -n "${VERBOSE}" ] && echo "DEBUG: ${0##*/} END"
exit 0


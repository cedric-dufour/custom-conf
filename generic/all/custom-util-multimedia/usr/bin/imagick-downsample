#!/bin/bash


## Usage
[ $# -lt 2 -o "${1##*-}" == 'help' ] && cat << EOF && exit 1
USAGE: ${0##*/} [<options>] <source-dir> <destination-dir>

SYNOPSIS:
  Downsample or transcode (to JPEG format) all image files found in the source
  directory to the destination directory (keeping the same structure).
  This script is "thread-safe", meaning that it can be executed concurrently
  with the same arguments in order to benefit from multiple CPUs/cores.

OPTIONS:
  -g, --gauge <integer> [default:1024]
      Size gauge, in pixels (px)

  -q, --quality <integer> [default:80]
      JPEG encoding quality

  -s, --subsampling <string> [default:'4:2:0']
      JPEG chroma subsampling
      (REF: https://calendar.perfplanet.com/2015/why-arent-your-images-using-chroma-subsampling/)

AUTHOR:
  CÃ©dric Dufour - http://cedric.dufour.name
EOF


## Arguments
SIZE_GAUGE=1024
JPEG_QUALITY=80
JPEG_SUBSAMPLING='4:2:0'
while [ -n "${1}" ]; do
  case "${1}" in
    '-g'|'--gauge')
      [ -z "${2}" ] && echo "ERROR: Missing option value (${1})" >&2 && exit 1; SIZE_GAUGE="${2}"; shift;;
    '-q'|'--quality')
      [ -z "${2}" ] && echo "ERROR: Missing option value (${1})" >&2 && exit 1; JPEG_QUALITY="${2}"; shift;;
    '-s'|'--subsampling')
      [ -z "${2}" ] && echo "ERROR: Missing option value (${1})" >&2 && exit 1; JPEG_SUBSAMPLING="${2}"; shift;;
    *)
      if [ -z "${SRC_DIR}" ]; then SRC_DIR="${1}"
      elif [ -z "${DST_DIR}" ]; then DST_DIR="${1}"
      else echo 'ERROR: Invalid (extra) argument' >&2 && exit 1
      fi
      ;;
  esac
  shift
done


## Check dependencies (and format support)
[ -z "$(which convert)" ] && echo "ERROR[$$]: 'convert' cannot be found" >&2 && exit 1


## Check directories and files
# ... files
SRC_FILE=
if [ -f "${SRC_DIR}" ]; then
  [ ! -r "${SRC_DIR}" ] && echo "ERROR[$$]: Invalid source file (${SRC_DIR})" >&2 && exit 1
  SRC_FILE="$(basename "${SRC_DIR}")"
  SRC_DIR="$(dirname "${SRC_DIR}")"
fi
DST_FILE=
if [ -n "${SRC_FILE}" ]; then
  if [ -d "${DST_DIR}" ]; then
    DST_FILE="$(dirname "${DST_DIR}")/${SRC_FILE}"
  else
    DST_FILE="$(basename "${DST_DIR}")"
    DST_DIR="$(dirname "${DST_DIR}")"
  fi
fi
# ... directories
SRC_DIR=${SRC_DIR%%/}
DST_DIR=${DST_DIR%%/}
[ ! -d "${SRC_DIR}" ] && echo "ERROR[$$]: Invalid source directory (${SRC_DIR})" >&2 && exit 1
[ ! -r "${SRC_DIR}" ] && echo "ERROR[$$]: Unable to read from source directory (${SRC_DIR})" >&2 && exit 1
[ ! -d "${DST_DIR}" ] && echo "ERROR[$$]: Invalid destination directory (${DST_DIR})" >&2 && exit 1
[ ! -w "${DST_DIR}" ] && echo "ERROR[$$]: Unable to write to destination directory (${DST_DIR})" >&2 && exit 1


## Lock function
DST_LOCK="${DST_DIR}/.lock"
function atomic_begin {
  n=100; while true; do # loop for ~5 seconds (100 x 0.05 seconds in average)
    n=$(( ${n}-1 ))
    [ ${n} -le 0 ] && echo "ERROR[$$]: Failed to acquire lock (${DST_LOCK})" >&2 && exit 1
    [ $(( ${n} % 10 )) -eq 0 ] && echo "WARNING[$$]: Waiting for lock (${DST_LOCK})" >&2
    if ( set -o noclobber; echo -n > "${DST_LOCK}" ) 2>/dev/null; then
      break
    fi
    sleep 0.0$(( ${RANDOM} % 10 ))
  done
}
function atomic_end {
  rm -f "${DST_LOCK}"
}


## Trap signals
trap 'echo "INTERRUPT[$$]: Cleaning and aborting" >&2; rm -f "${DST_LOCK}" "${p_dst}"; exit 2' INT TERM


## Loop through image files
echo "INFO[$$]: Looking for files to transcode..."
IFS=$'\n'; for p_src in $(eval "find '${SRC_DIR}${SRC_FILE:+/${SRC_FILE}}' \( -type f -o -type l \) \( -iname '*.jpg' -o -iname '*.jpeg' -o -iname '*.png' -o -iname '*.gif' -o -iname '*.tif' -o -iname '*.tiff'  \)" | sort); do
  # Compute source parameters
  d_src="$(dirname ${p_src})"
  [ -z "${DST_FILE}" -a -e "${d_src}/.nodownsample" ] && continue
  e_src="${p_src##*.}"

  # Compute destination parameters
  if [ -z "${DST_FILE}" ]; then
    p_dst="${p_src%.*}.jpg"
    p_dst="${DST_DIR}/${p_dst#${SRC_DIR}/}"
  else
    p_dst="${DST_DIR}/${DST_FILE}"
  fi
  d_dst="$(dirname ${p_dst})"
  f_dst="$(basename ${p_dst})"

  # Check/create destination directory
  [ ! -d "${d_dst}" ] && mkdir -p "${d_dst}"
  [ ! -d "${d_dst}" ] && echo "WARNING[$$]: Failed to create destination directory (${d_dst}); skipping..." >&2 && continue
  [ ! -w "${d_dst}" ] && echo "WARNING[$$]: Unable to write to destination directory (${d_dst}): skipping..." >&2 && continue

  # Check destination file
  atomic_begin
  [ -e "${p_dst}" ] && atomic_end && continue
  touch "${p_dst}"
  atomic_end

  # Transcoding
  echo "INFO[$$]: Transcoding ${p_src} -> ${p_dst}"

  # Downsample/transcode image file
  eval "convert \"${p_src}\" -resize '${SIZE_GAUGE}x${SIZE_GAUGE}>' -sampling-factor '${JPEG_SUBSAMPLING}' -quality ${JPEG_QUALITY} +profile '*' \"${p_dst}\""
  [ $? -ne 0 ] && echo "WARNING[$$]: An error occured while transcoding (${p_aux} -> ${p_dst}); skipping..." >&2 && continue

done


## Done
echo "INFO[$$]: Done"
exit 0


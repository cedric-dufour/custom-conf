#!/usr/bin/env python3

# ------------------------------------------------------------------------------
# DEPENDENCIES
# ------------------------------------------------------------------------------

# Standard
import argparse
import errno
import logging
import os
import re
import sys
from socket import gethostbyaddr

# Non-standard
try:
    from GeoIP import GEOIP_STANDARD
    from GeoIP import open as GeoIpReader  # python3-geoip
except ImportError:
    GeoIpReader = None


# ------------------------------------------------------------------------------
# LOGGING
# ------------------------------------------------------------------------------

logger = logging.getLogger("logparse-geoip")


# ------------------------------------------------------------------------------
# CONSTANTS
# ------------------------------------------------------------------------------

# Databases
GEOIP_DATABASE_IPV4 = os.getenv("GEOIP_DATABASE_IPV4", "/usr/share/GeoIP/GeoIP.dat")
GEOIP_DATABASE_IPV6 = os.getenv("GEOIP_DATABASE_IPV6", "/usr/share/GeoIP/GeoIPv6.dat")

# RegExps
REGEXP_LINE_SPLIT = re.compile(r"[^.:0-9a-z]", re.IGNORECASE)
# (IPv4)
REGEXP_IPV4_INLINE = re.compile(r"(^|[^.0-9])([0-9]{1,3}(\.[0-9]{1,3}){3})([^.0-9]|$)")
REGEXP_IPV4_LOOPBACK = re.compile(r"^127(\.[0-9]{1,3}){3}$")
REGEXP_IPV4_PRIVATE_8 = re.compile(r"^10(\.[0-9]{1,3}){3}$")
REGEXP_IPV4_PRIVATE_16 = re.compile(r"^172\.(1[6-9]|2[0-9]|3[0-1])(\.[0-9]{1,3}){2}$")
REGEXP_IPV4_PRIVATE_24 = re.compile(r"^192\.168(\.[0-9]{1,3}){2}$")
REGEXP_IPV4_MULTICAST = re.compile(r"^2(2[4-9]|3[0-9])(\.[0-9]{1,3}){3}$")
# (IPv6)
REGEXP_IPV6_INLINE = re.compile(r"(^|[^.:0-9a-f])([0-9a-f]{4}(:[:0-9a-f]+){1,7})([^.:0-9a-f]|$)", re.IGNORECASE)
REGEXP_IPV6_LOOPBACK = re.compile(r"^::1$")
REGEXP_IPV6_ULA = re.compile(r"^f[cd].*", re.IGNORECASE)
REGEXP_IPV6_LINKLOCAL = re.compile(r"^fe8.*", re.IGNORECASE)
REGEXP_IPV6_MULTICAST = re.compile(r"^ff.*", re.IGNORECASE)


# ------------------------------------------------------------------------------
# CLASSES
# ------------------------------------------------------------------------------


class GeoIP:

    # ------------------------------------------------------------------------------
    # CONSTRUCTORS / DESTRUCTOR
    # ------------------------------------------------------------------------------

    def __init__(self):
        # Fields
        # (configuration)
        self.__argumentParser = None
        self.__arguments = None

        # Initialization
        self.__initArgumentParser()

        # GeoIP databases
        self.__dbIPv4 = None
        self.__dbIPv6 = None

        # DNS resolution
        self.__resolve_regexp = None

        # Cache
        self.__enrichCache = {}

    def __initArgumentParser(self):
        # Create argument parser
        self.__argumentParser = argparse.ArgumentParser(sys.argv[0].split(os.sep)[-1])

        # (input)
        self.__argumentParser.add_argument(
            "input",
            type=str,
            nargs="?",
            default="-",
            help="Input file (use '-' for standard input)",
        )

        # (resolve)
        self.__argumentParser.add_argument(
            "--resolve-private",
            "-p",
            action="store_true",
            default=False,
            help="Lookup private (RFC1918 and ULA) IP addresses in DNS (PTR)",
        )
        self.__argumentParser.add_argument(
            "--resolve-match",
            "-m",
            type=str,
            default=None,
            help="Regular expression matching IP addresses to lookup in DNS (PTR)",
        )

        # (country)
        self.__argumentParser.add_argument(
            "--country",
            "-C",
            action="store_true",
            default=False,
            help="Add GeoIP-ed country information",
        )

        # (state)
        self.__argumentParser.add_argument(
            "--state",
            "-ST",
            action="store_true",
            default=False,
            help="Add GeoIP-ed state information",
        )

        # (city)
        self.__argumentParser.add_argument(
            "--city",
            "-L",
            action="store_true",
            default=False,
            help="Add GeoIP-ed city information",
        )

        # (asn)
        self.__argumentParser.add_argument(
            "--asn",
            "-O",
            action="store_true",
            default=False,
            help="Add GeoIP-ed Autonomous System (ASN) information",
        )

        # (terse)
        self.__argumentParser.add_argument(
            "--terse",
            action="store_true",
            default=False,
            help="Output terse GeoIP information",
        )

        # (debug)
        self.__argumentParser.add_argument(
            "--debug",
            action="store_true",
            default=False,
            help="Output debugging messages",
        )

    # ------------------------------------------------------------------------------
    # METHODS
    # ------------------------------------------------------------------------------

    #
    # Helpers
    #

    # GeoIP databases
    def ipv4country(self, ip: str, terse: bool = False):
        if self.__dbIPv4 is None:
            self.__dbIPv4 = GeoIpReader(GEOIP_DATABASE_IPV4, GEOIP_STANDARD)
        try:
            code = self.__dbIPv4.country_code_by_addr(ip)
            if code is None:
                return None
            if terse:
                return f"C={code}"
            else:
                name = self.__dbIPv4.country_name_by_addr(ip)
                return f"C={name} [{code}]"
        except Exception as e:
            logger.debug(f"Failed to query GeoIP IPv4 database for IP: {ip}; {str(e)}")
            return None

    def ipv6country(self, ip: str, terse: bool = False):
        if self.__dbIPv6 is None:
            self.__dbIPv6 = GeoIpReader(GEOIP_DATABASE_IPV6, GEOIP_STANDARD)
        try:
            code = self.__dbIPv6.country_code_by_addr_v6(ip)
            if code is None:
                return None
            if terse:
                return f"C={code}"
            else:
                name = self.__dbIPv6.country_name_by_addr_v6(ip)
                return f"C={name} [{code}]"
        except Exception as e:
            logger.debug(f"Failed to query GeoIP IPv6 database for IP: {ip}; {str(e)}")
            return None

    # DNS
    def ip2hostname(self, ip: str):
        try:
            return gethostbyaddr(ip)[0]
        except Exception:
            return None

    #
    # Enrich
    #

    def enrich(self, line: str):
        enriches = {}
        for split in REGEXP_LINE_SPLIT.split(line):
            # logger.debug(f"Analyzing split: {split}")

            # IPv4
            if ip := REGEXP_IPV4_INLINE.search(split):
                ip = ip[2]
                if ip in enriches:
                    continue
                if ip in self.__enrichCache:
                    enriches[ip] = self.__enrichCache[ip]
                    continue

                logger.debug(f"Enriching IPv4: {ip}")
                enrich = list()

                # Well-known
                hostname = None
                doGeoIp = False
                if REGEXP_IPV4_LOOPBACK.fullmatch(ip):
                    if self.__arguments.resolve_private:
                        hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)
                    else:
                        enrich.append("loopback")
                elif REGEXP_IPV4_PRIVATE_8.fullmatch(ip):
                    if self.__arguments.resolve_private:
                        hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)
                    else:
                        enrich.append("private/8")
                elif REGEXP_IPV4_PRIVATE_16.fullmatch(ip):
                    if self.__arguments.resolve_private:
                        hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)
                    else:
                        enrich.append("private/16")
                elif REGEXP_IPV4_PRIVATE_24.fullmatch(ip):
                    if self.__arguments.resolve_private:
                        hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)
                    else:
                        enrich.append("private/24")
                elif REGEXP_IPV4_MULTICAST.fullmatch(ip):
                    enrich.append("multicast")

                # DNS
                else:
                    doGeoIp = True
                    if self.__resolve_regexp and self.__resolve_regexp.fullmatch(ip):
                        hostname = self.ip2hostname(ip)
                        if hostname:
                            enrich.append(hostname)

                # GeoIP
                if doGeoIp and GeoIpReader:
                    if self.__arguments.country:
                        enrich.append(self.ipv4country(ip, self.__arguments.terse))

                # Enrich
                enrich = ",".join([v for v in enrich if v is not None])
                self.__enrichCache[ip] = enriches[ip] = enrich or None

            # IPv6
            if ip := REGEXP_IPV6_INLINE.search(split):
                ip = ip[2]
                if ip in enriches:
                    continue
                if ip in self.__enrichCache:
                    enriches[ip] = self.__enrichCache[ip]
                    continue

                logger.debug(f"Enriching IPv6: {ip}")
                enrich = list()

                # Well-known
                hostname = None
                doGeoIp = False
                if REGEXP_IPV6_LOOPBACK.fullmatch(ip):
                    if self.__arguments.resolve_private:
                        hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)
                    else:
                        enrich.append("loopback")
                elif REGEXP_IPV6_ULA.fullmatch(ip):
                    if self.__arguments.resolve_private:
                        hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)
                    else:
                        enrich.append("ULA")
                elif REGEXP_IPV6_LINKLOCAL.fullmatch(ip):
                    enrich.append("link-local")
                elif REGEXP_IPV6_MULTICAST.fullmatch(ip):
                    enrich.append("multicast")

                # DNS
                else:
                    doGeoIp = True
                    if self.__resolve_regexp and self.__resolve_regexp.fullmatch(ip):
                        hostname = self.ip2hostname(ip)
                        if hostname:
                            enrich.append(hostname)

                # GeoIP
                if doGeoIp and GeoIpReader:
                    if self.__arguments.country:
                        enrich.append(self.ipv6country(ip, self.__arguments.terse))

                # Enrich
                enrich = ",".join([v for v in enrich if v is not None])
                self.__enrichCache[ip] = enriches[ip] = enrich or None

        # Enrich
        for ip, enrich in enriches.items():
            if enrich:
                line = re.sub(
                    r"(?P<prefix>^|[^.:0-9a-f])" + re.escape(ip) + r"(?P<suffix>[^.:0-9a-f]|$)",
                    r"\g<prefix>" + f"{ip} ({enrich})" + r"\g<suffix>",
                    line,
                )

        # Done
        return line

    #
    # Entrypoint
    #

    def execute(self):
        # Initialize

        # (arguments)
        try:
            self.__arguments = self.__argumentParser.parse_args()
        except Exception as e:
            logger.error(f"Failed to parse arguments; {str(e)}")
            return errno.EINVAL
        self._debug = self.__arguments.debug

        # (verbosity)
        if self._debug:
            logger.setLevel(logging.DEBUG)

        # Main
        if not GeoIpReader:
            logger.debug("Package 'GeoIP' is not installed; no GeoIP lookup will be performed")

        # DNS resolution
        if self.__arguments.resolve_match is not None:
            self.__resolve_regexp = re.compile(self.__arguments.resolve_match, re.IGNORECASE)

        # Enrich
        input_filename = self.__arguments.input
        if input_filename == "-":
            for line in sys.stdin.readlines():
                sys.stdout.write(self.enrich(line))
        else:
            with open(input_filename, "r") as input_file:
                for line in input_file.readlines():
                    sys.stdout.write(self.enrich(line))


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

if __name__ == "__main__":
    try:
        logging.basicConfig()
        logger.setLevel(logging.INFO)
        sys.exit(GeoIP().execute())
    except Exception as e:
        logger.error(f"Failed to execute command; {str(e)}")
        sys.exit(errno.EINVAL)
    except KeyboardInterrupt:
        sys.exit(-2)

#!/usr/bin/env python3

# ------------------------------------------------------------------------------
# DEPENDENCIES
# ------------------------------------------------------------------------------

# Standard
import argparse
import errno
import logging
import os
import re
from socket import gethostbyaddr
import sys

# Non-standard
from geoip2.database import Reader as GeoIpReader  # python3-geoip2


# ------------------------------------------------------------------------------
# LOGGING
# ------------------------------------------------------------------------------

logger = logging.getLogger("logparse-geoip2")


# ------------------------------------------------------------------------------
# CONSTANTS
# ------------------------------------------------------------------------------

# Databases
GEOIP2_DATABASE_COUNTRY = os.getenv(
    "GEOIP2_DATABASE_COUNTRY", "/var/lib/GeoIP/GeoLite2-Country.mmdb"
)
GEOIP2_DATABASE_CITY = os.getenv(
    "GEOIP2_DATABASE_CITY", "/var/lib/GeoIP/GeoLite2-City.mmdb"
)
GEOIP2_DATABASE_ASN = os.getenv(
    "GEOIP2_DATABASE_ASN", "/var/lib/GeoIP/GeoLite2-ASN.mmdb"
)

# RegExps
# (IPv4)
REGEXP_IPV4_INLINE = re.compile("(^|\\W)([0-9]{1,3}(\\.[0-9]{1,3}){3})(\\W|$)")
REGEXP_IPV4_LOOPBACK = re.compile("^127(\\.[0-9]{1,3}){3}$")
REGEXP_IPV4_PRIVATE_8 = re.compile("^10(\\.[0-9]{1,3}){3}$")
REGEXP_IPV4_PRIVATE_16 = re.compile("^172\\.(1[6-9]|2[0-9]|3[0-1])(\\.[0-9]{1,3}){2}$")
REGEXP_IPV4_PRIVATE_24 = re.compile("^192\\.168(\\.[0-9]{1,3}){2}$")
REGEXP_IPV4_MULTICAST = re.compile("^2(2[4-9]|3[0-9])(\\.[0-9]{1,3}){3}$")
# (IPv6)
REGEXP_IPV6_INLINE = re.compile(
    "(^|\\W)([0-9a-f]{4}(:[:0-9a-f]+){1,7})(\\W|$)", re.IGNORECASE
)
REGEXP_IPV6_LOOPBACK = re.compile("^::1$")
REGEXP_IPV6_ULA = re.compile("^f[cd].*", re.IGNORECASE)
REGEXP_IPV6_LINKLOCAL = re.compile("^fe8.*", re.IGNORECASE)
REGEXP_IPV6_MULTICAST = re.compile("^ff.*", re.IGNORECASE)


# ------------------------------------------------------------------------------
# CLASSES
# ------------------------------------------------------------------------------


class GeoIP2:

    # ------------------------------------------------------------------------------
    # CONSTRUCTORS / DESTRUCTOR
    # ------------------------------------------------------------------------------

    def __init__(self):
        # Fields
        # (configuration)
        self.__argumentParser = None
        self.__arguments = None

        # Initialization
        self.__initArgumentParser()

        # GeoIP databases
        self.__dbCountry = None
        self.__dbCity = None
        self.__dbAsn = None

        # DNS resolution
        self.__resolve_regexp = None

    def __del__(self):
        # GeoIP databases
        if self.__dbCountry:
            self.__dbCountry.close()
        if self.__dbCity:
            self.__dbCity.close()
        if self.__dbAsn:
            self.__dbAsn.close()

    def __initArgumentParser(self):
        # Create argument parser
        self.__argumentParser = argparse.ArgumentParser(sys.argv[0].split(os.sep)[-1])

        # (input)
        self.__argumentParser.add_argument(
            "input",
            type=str,
            nargs="?",
            default="-",
            help="Input file (use '-' for standard input)",
        )

        # (resolve)
        self.__argumentParser.add_argument(
            "--resolve-private",
            "-p",
            action="store_true",
            default=False,
            help="Lookup private (RFC1918 and ULA) IP addresses in DNS (PTR)",
        )
        self.__argumentParser.add_argument(
            "--resolve-match",
            "-m",
            type=str,
            default=None,
            help="Regular expression matching IP addresses to lookup in DNS (PTR)",
        )

        # (country)
        self.__argumentParser.add_argument(
            "--country",
            "-C",
            action="store_true",
            default=False,
            help="Add GeoIP-ed country information",
        )

        # (state)
        self.__argumentParser.add_argument(
            "--state",
            "-ST",
            action="store_true",
            default=False,
            help="Add GeoIP-ed state information",
        )

        # (city)
        self.__argumentParser.add_argument(
            "--city",
            "-L",
            action="store_true",
            default=False,
            help="Add GeoIP-ed city information",
        )

        # (asn)
        self.__argumentParser.add_argument(
            "--asn",
            "-O",
            action="store_true",
            default=False,
            help="Add GeoIP-ed Autonomous System (ASN) information",
        )

        # (terse)
        self.__argumentParser.add_argument(
            "--terse",
            action="store_true",
            default=False,
            help="Output terse GeoIP information",
        )

        # (debug)
        self.__argumentParser.add_argument(
            "--debug",
            action="store_true",
            default=False,
            help="Output debugging messages",
        )

    # ------------------------------------------------------------------------------
    # METHODS
    # ------------------------------------------------------------------------------

    #
    # Helpers
    #

    # GeoIP databases
    def ip2country(self, ip: str, terse: bool = False):
        if self.__dbCountry is None:
            self.__dbCountry = GeoIpReader(GEOIP2_DATABASE_COUNTRY)
        try:
            entry = self.__dbCountry.country(ip)
            if entry.country.iso_code is None:
                return None
            if terse:
                return f"C={entry.country.iso_code}"
            else:
                return f"C={entry.country.name} [{entry.country.iso_code}]"
        except Exception as e:
            logger.debug(
                f"Failed to query GeoIP country database for IP: {ip}; {str(e)}"
            )
            return None

    def ip2state(self, ip: str, terse: bool = False):
        if self.__dbCity is None:
            self.__dbCity = GeoIpReader(GEOIP2_DATABASE_CITY)
        try:
            entry = self.__dbCity.city(ip)
            if entry.subdivisions.most_specific.iso_code is None:
                return None
            if terse:
                return f"ST={entry.subdivisions.most_specific.iso_code}"
            else:
                return f"ST={entry.subdivisions.most_specific.name} [{entry.subdivisions.most_specific.iso_code}]"
        except Exception as e:
            logger.debug(f"Failed to query GeoIP city database for IP: {ip}; {str(e)}")
            return None

    def ip2city(self, ip: str, terse: bool = False):
        if self.__dbCity is None:
            self.__dbCity = GeoIpReader(GEOIP2_DATABASE_CITY)
        try:
            entry = self.__dbCity.city(ip)
            if entry.postal.code is None:
                return None
            if terse:
                return f"L={entry.postal.code}"
            else:
                return f"L={entry.city.name} [{entry.postal.code}]"
        except Exception as e:
            logger.debug(f"Failed to query GeoIP city database for IP: {ip}; {str(e)}")
            return None

    def ip2asn(self, ip: str, terse: bool = False):
        if self.__dbAsn is None:
            self.__dbAsn = GeoIpReader(GEOIP2_DATABASE_ASN)
        try:
            entry = self.__dbAsn.asn(ip)
            if entry.autonomous_system_number is None:
                return None
            if terse:
                return f"O={entry.autonomous_system_number}"
            else:
                return f"O={entry.autonomous_system_organization} [{entry.autonomous_system_number}]"
        except Exception as e:
            logger.debug(f"Failed to query GeoIP ASN database for IP: {ip}; {str(e)}")
            return None

    # DNS
    def ip2hostname(self, ip: str):
        try:
            return gethostbyaddr(ip)[0]
        except Exception:
            return None

    #
    # Enrich
    #

    def enrich(self, line: str):
        # IPv4
        ip = REGEXP_IPV4_INLINE.search(line)
        if ip:
            ip = ip[2]
            logger.debug(f"Enriching IPv4: {ip}")
            enrich = list()

            # Well-known
            hostname = None
            if REGEXP_IPV4_LOOPBACK.fullmatch(ip):
                if self.__arguments.resolve_private:
                    hostname = self.ip2hostname(ip)
                if hostname:
                    enrich.append(hostname)
                else:
                    enrich.append("loopback")
            elif REGEXP_IPV4_PRIVATE_8.fullmatch(ip):
                if self.__arguments.resolve_private:
                    hostname = self.ip2hostname(ip)
                if hostname:
                    enrich.append(hostname)
                else:
                    enrich.append("private/8")
            elif REGEXP_IPV4_PRIVATE_16.fullmatch(ip):
                if self.__arguments.resolve_private:
                    hostname = self.ip2hostname(ip)
                if hostname:
                    enrich.append(hostname)
                else:
                    enrich.append("private/16")
            elif REGEXP_IPV4_PRIVATE_24.fullmatch(ip):
                if self.__arguments.resolve_private:
                    hostname = self.ip2hostname(ip)
                if hostname:
                    enrich.append(hostname)
                else:
                    enrich.append("private/24")
            elif REGEXP_IPV4_MULTICAST.fullmatch(ip):
                enrich.append("multicast")

            # DNS
            elif self.__resolve_regexp:
                if self.__resolve_regexp.fullmatch(ip):
                    hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)

            # GeoIP
            if not enrich:
                if self.__arguments.country:
                    enrich.append(self.ip2country(ip, self.__arguments.terse))
                if self.__arguments.state:
                    enrich.append(self.ip2state(ip, self.__arguments.terse))
                if self.__arguments.city:
                    enrich.append(self.ip2city(ip, self.__arguments.terse))
                if self.__arguments.asn:
                    enrich.append(self.ip2asn(ip, self.__arguments.terse))

            # Enrich
            enrich = [v for v in enrich if v is not None]
            if enrich:
                enrich = ",".join(enrich)
                line = line.replace(ip, f"{ip} ({enrich})")

        # IPv6
        ip = REGEXP_IPV6_INLINE.search(line)
        if ip:
            ip = ip[2]
            logger.debug(f"Enriching IPv6: {ip}")
            enrich = list()

            # Well-known
            hostname = None
            if REGEXP_IPV6_LOOPBACK.fullmatch(ip):
                if self.__arguments.resolve_private:
                    hostname = self.ip2hostname(ip)
                if hostname:
                    enrich.append(hostname)
                else:
                    enrich.append("loopback")
            elif REGEXP_IPV6_ULA.fullmatch(ip):
                if self.__arguments.resolve_private:
                    hostname = self.ip2hostname(ip)
                if hostname:
                    enrich.append(hostname)
                else:
                    enrich.append("ULA")
            elif REGEXP_IPV6_LINKLOCAL.fullmatch(ip):
                enrich.append("link-local")
            elif REGEXP_IPV6_MULTICAST.fullmatch(ip):
                enrich.append("multicast")

            # DNS
            elif self.__resolve_regexp:
                if self.__resolve_regexp.fullmatch(ip):
                    hostname = self.ip2hostname(ip)
                    if hostname:
                        enrich.append(hostname)

            # GeoIP
            if not enrich:
                if self.__arguments.country:
                    enrich.append(self.ip2country(ip, self.__arguments.terse))
                if self.__arguments.state:
                    enrich.append(self.ip2state(ip, self.__arguments.terse))
                if self.__arguments.city:
                    enrich.append(self.ip2city(ip, self.__arguments.terse))
                if self.__arguments.asn:
                    enrich.append(self.ip2asn(ip, self.__arguments.terse))

            # Enrich
            enrich = [v for v in enrich if v is not None]
            if enrich:
                enrich = ",".join(enrich)
                line = line.replace(ip, f"{ip} ({enrich})")

        # Done
        return line

    #
    # Entrypoint
    #

    def execute(self):
        # Initialize

        # (arguments)
        try:
            self.__arguments = self.__argumentParser.parse_args()
        except Exception as e:
            logger.error(f"Failed to parse arguments; {str(e)}")
            return errno.EINVAL
        self._debug = self.__arguments.debug

        # (verbosity)
        if self._debug:
            logger.setLevel(logging.DEBUG)

        # Main

        # DNS resolution
        if self.__arguments.resolve_match is not None:
            self.__resolve_regexp = re.compile(
                self.__arguments.resolve_match, re.IGNORECASE
            )

        # Enrich
        input_filename = self.__arguments.input
        if input_filename == "-":
            for line in sys.stdin.readlines():
                sys.stdout.write(self.enrich(line))
        else:
            with open(input_filename, "r") as input_file:
                for line in input_file.readlines():
                    sys.stdout.write(self.enrich(line))


# ------------------------------------------------------------------------------
# MAIN
# ------------------------------------------------------------------------------

if __name__ == "__main__":
    try:
        logging.basicConfig()
        logger.setLevel(logging.INFO)
        sys.exit(GeoIP2().execute())
    except Exception as e:
        logger.error(f"Failed to execute command; {str(e)}")
        sys.exit(errno.EINVAL)
    except KeyboardInterrupt:
        sys.exit(-2)

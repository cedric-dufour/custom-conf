#!/bin/bash


## Usage
function __USAGE() {
cat << EOF
USAGE: ${0##*/} -N <NPAPI-tarball> -P <PPAPI-tarball> [-D <DPKG-directory>]

SYSNOPSIS:
  Extract the Flash NPAPI/PPAPI resources from the given tarballs
  and update the Debian packaging directory structure accordingly.

  Please visit https://get.adobe.com/flashplayer/otherversions/ to
  obtain the required tarballs
EOF
}

# Arguments
NPAPI_TAR=
PPAPI_TAR=
DPKG_DIR=.
while [ -n "${1}" ]; do
  case "${1}" in
    '-h'|'--help')
      __USAGE
      exit 0
      ;;
    '-N'|'--npapi')
      shift
      [ -z "${1}" ] && echo "ERROR: Missing option argument (<NPAPI-tarball>)" >&2 && exit 1
      NPAPI_TAR="${1}"
      ;;
    '-P'|'--ppapi')
      shift
      [ -z "${1}" ] && echo "ERROR: Missing option argument (<PPAPI-tarball>)" >&2 && exit 1
      PPAPI_TAR="${1}"
      ;;
    '-D'|'--debian')
      shift
      [ -z "${1}" ] && echo "ERROR: Missing option argument (<DPKG-directory>)" >&2 && exit 1
      DPKG_DIR="${1}"
      ;;
    *)
      echo "ERROR: Invalid option/argument (${1})" >&2 && __USAGE && exit 1
      ;;
  esac
  shift
done

# Validation
[ -z "${NPAPI_TAR}" -a -z "${PPAPI_TAR}" ] && echo "ERROR: You must supply at least one tarball (NPAPI or PPAPI)" >&2 && exit 1
[ ! -d "${DPKG_DIR}/usr/lib/custom-packages-install-flash" ] && echo "ERROR: Invalid Debian packaging directory (${DPKG_DIR})" >&2 && exit 1


## Temporary resources
SRC_DIR="${DPKG_DIR}/src.$$"
rm -rf "${SRC_DIR}"
mkdir -p "${SRC_DIR}"/{npapi,ppapi}
[ ! -d "${SRC_DIR}" ] && echo "ERROR: Failed to create temporary source directory (${SRC_DIR})" >&2 && exit 1
trap "rm -rf '${SRC_DIR}'" EXIT


## NPAPI
if [ -n "${NPAPI_TAR}" ]; then
  [ ! -r "${NPAPI_TAR}" ] && echo "ERROR: Missing/unreadable NPAPI tarball (${NPAPI_TAR})" >&2 && exit 1
  echo "INFO: Processing NPAPI Flash tarball (${PPAPI_TAR})"

  # Clean-up
  find "${DPKG_DIR}/usr" -not -type d -not -path "*/ppapi/*" -not -name '.gitplaceholder' -delete

  # Extract tarball content
  tar -C "${SRC_DIR}/npapi" -xzf "${NPAPI_TAR}"; e=$?
  [ ${e} -ne 0 ] && echo "ERROR: Failed to extract NPAPI tarball content" >&2 && exit 1

  # Retrieve actual plugin
  for name in libflashplayer.so; do
    find "${SRC_DIR}/npapi" -type f -name "${name}" -exec cp {} "${DPKG_DIR}/usr/lib/custom-packages-install-flash/npapi/" \; ; e=$?
    [ ${e} -ne 0 ] && echo "ERROR: Failed to find/copy NPAPI file (${name})" >&2 && exit ${e}
  done
  # ... and its version
  NPAPI_VER="$(strings "${DPKG_DIR}/usr/lib/custom-packages-install-flash/npapi/libflashplayer.so" | fgrep LNX | sed 's/^.*LNX\s*//;s/,/./g')"
  [ -z "${NPAPI_VER}" ] && echo "ERROR: Failed to retrieve NPAPI version" >&2 && exit 1

  # Retrieve read-me and copyright stuff
  for path_iname in '*:readme*' '*:notice*' '*:*gpl*'; do
    path="${path_iname%:*}"
    iname="${path_iname#*:}"
    find "${SRC_DIR}/npapi" -type f -path "${path}" -iname "${iname}" -exec cp {} "${DPKG_DIR}/usr/share/doc/custom-packages-install-flash/npapi/" \; ; e=$?
    [ ${e} -ne 0 ] && echo "ERROR: Failed to find/copy NPAPI file (${name})" >&2 && exit ${e}
  done

  # Retrieve other resources
  for path_iname in '*/usr/bin/*:flash*' '*/usr/share/*:flash*.png' '*/usr/share/applications/*:flash*.desktop'; do
    path="${path_iname%:*}"
    iname="${path_iname#*:}"
    find -L "${SRC_DIR}/npapi" -type f -path "${path}" -iname "${iname}" | while read file; do
      dst_path="${DPKG_DIR}/${file#${SRC_DIR}/npapi/}"
      dst_dir="${dst_path%/*}"
      mkdir -p "${dst_dir}"
      cp -d "${file}" "${dst_dir}/"; e=$?
      [ ${e} -ne 0 ] && echo "ERROR: Failed to find/copy NPAPI file (${name})" >&2 && exit ${e}
    done
  done

  # Done
  echo "INFO: NPAPI Flash plugin successfully updated; version=${NPAPI_VER}"
fi


## PPAPI
if [ -n "${PPAPI_TAR}" ]; then
  [ ! -r "${PPAPI_TAR}" ] && echo "ERROR: Missing/unreadable PPAPI tarball (${PPAPI_TAR})" >&2 && exit 1
  echo "INFO: Processing PPAPI Flash tarball (${PPAPI_TAR})"

  # Clean-up
  find "${DPKG_DIR}/usr" -not -type d -path "*/ppapi/*" -not -name '.gitplaceholder' -delete

  # Extract tarball content
  tar -C "${SRC_DIR}/ppapi" -xzf "${PPAPI_TAR}"; e=$?
  [ ${e} -ne 0 ] && echo "ERROR: Failed to extract PPAPI tarball content" >&2 && exit ${e}

  # Retrieve actual plugin
  for name in libpepflashplayer.so manifest.json; do
    find "${SRC_DIR}/ppapi" -type f -name "${name}" -exec cp {} "${DPKG_DIR}/usr/lib/custom-packages-install-flash/ppapi/" \; ; e=$?
    [ ${e} -ne 0 ] && echo "ERROR: Failed to find/copy PPAPI file (${name})" >&2 && exit ${e}
  done
  # ... and its version
  PPAPI_VER="$(strings "${DPKG_DIR}/usr/lib/custom-packages-install-flash/ppapi/libpepflashplayer.so" | fgrep LNX | sed 's/^.*LNX\s*//;s/,/./g')"
  [ -z "${PPAPI_VER}" ] && echo "ERROR: Failed to retrieve PPAPI version" >&2 && exit 1

  # Retrieve read-me and copyright stuff
  for path_iname in '*:readme*' '*:notice*' '*:*gpl*'; do
    path="${path_iname%:*}"
    iname="${path_iname#*:}"
    find "${SRC_DIR}/ppapi" -type f -path "${path}" -iname "${iname}" -exec cp {} "${DPKG_DIR}/usr/share/doc/custom-packages-install-flash/ppapi/" \; ; e=$?
    [ ${e} -ne 0 ] && echo "ERROR: Failed to find/copy PPAPI file (${name})" >&2 && exit ${e}
  done

  # Update Chromium flags
  sed -i "s/^flashversion=.*\$/flashversion='${PPAPI_VER}'/" "${DPKG_DIR}/etc/chromium.d/custom-packages-install-flash"; e=$?
  [ ${e} -ne 0 ] && echo "ERROR: Failed to update PPAPI version in Chromium configuration (${DPKG_DIR}/etc/chromium.d/custom-packages-install-flash)" >&2 && exit ${e}

  # Done
  echo "INFO: PPAPI Flash plugin successfully updated; version=${PPAPI_VER}"
fi


## Done
cat << EOF
INFO: You can now edit the changelog and build the Debian package
  cd '${DPKG_DIR}'
  ${EDITOR:-vi} ./debian/changelog
  dpkg-buildpackage -us -uc -b
WARNING: Do not forget to CLEAN-UP aftewards!
  dh_clean
  ./cleanup-flash
EOF
exit 0


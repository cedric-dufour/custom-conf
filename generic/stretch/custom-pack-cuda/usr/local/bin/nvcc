#!/bin/bash
## CUSTOM-PACK: File automatically created/updated [custom-pack-cuda]

## QUIRK: CUDA 8 does not like Debian/Stretch's GCC 6
#         <-> https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=835940

# Let's use GCC 4.9 (non-stock; if installed) or CLang 3.8 (stock)
[ -n "$(which gcc-4.9)" ] && ccbin='gcc-4.9' || ccbin='clang-3.8'

# Filter-out user-passed '--compiler-bindir' directive
declare -a args
arg_ccbin=
while [ -n "${1}" ]; do
  case "${1}" in

    --compiler-bindir|-ccbin|--compiler-bindir=*|-ccbin=*)
      [[ ${1} =~ = ]] || shift
      arg_ccbin="${1#*=}"
      ;;
        
    *)
      args[${#args[*]}]="${1}"
      ;;

  esac
  shift
done

# Let's match user request the best we can
case "${arg_ccbin}" in
  '') ;;

  *clang++*)
    ccbin='clang++-3.8'
    ;;

  *clang*)
    ccbin='clang-3.8'
    ;;

  *gcc*)
    if [ -n "$(which gcc-4.9)" ]; then
      ccbin='gcc-4.9'
    else
      ccbin='clang-3.8'
      echo "WARNING[${0}]: No supported gcc version is available; using ${ccbin} instead" >&2
    fi
    ;;

  *g++*)
    if [ -n "$(which g++-4.9)" ]; then
      ccbin='g++-4.9'
    else
      ccbin='clang++-3.8'
      echo "WARNING[${0}]: No supported g++ version is available; using ${ccbin} instead" >&2
    fi
    ;;

  *)
    echo "WARNING[${0}]: Unsupported compiler ${arg_ccbin}; using ${ccbin} instead" >&2
    ;;

esac

# Let's do it!
[ -n "${NVCC_WRAPPER_DEBUG}" ] && echo "DEBUG[${0}]: nvcc -ccbin ${ccbin} ${args[@]}" >&2
exec /usr/lib/nvidia-cuda-toolkit/bin/nvcc -ccbin "${ccbin}" "${args[@]}"


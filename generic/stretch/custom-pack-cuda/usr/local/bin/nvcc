#!/bin/bash
## CUSTOM-PACK: File automatically created/updated [custom-pack-cuda]

## QUIRK: CUDA 8 does not like Debian/Stretch's GCC 6
#         <-> https://bugs.debian.org/cgi-bin/bugreport.cgi?bug=835940

## QUIRK: CUDA 9 does not support architecture 'sm_75' (Turing)
#         <-> https://devtalk.nvidia.com/default/topic/1044361/value-quot-sm_75-quot-not-defined-with-cuda-9-0-installed-on-rtx-2070

# Retrieve CUDA version
CUDA_VERSION="$(/usr/lib/nvidia-cuda-toolkit/bin/nvcc --version | sed -n 's|^.*V\([.0-9]*\)$|\1|p')"

# Filter-out user-passed arguments
declare -a args
arg_ccbin=
arg_arch=
while [ -n "${1}" ]; do
  case "${1}" in

    --compiler-bindir|-ccbin|--compiler-bindir=*|-ccbin=*)
      [[ ${1} =~ = ]] || shift
      arg_ccbin="${1#*=}"
      ;;

    --gpu-architecture|-arch|--gpu-architecture=*|-arch=*)
      [[ ${1} =~ = ]] || shift
      arg_arch="${1#*=}"
      ;;

    *)
      args[${#args[*]}]="${1}"
      ;;

  esac
  shift
done

# Let's match user requested compiler the best we can
if [ ${CUDA_VERSION%%.*} -lt 9 ]; then
  # ... by default, let's use GCC 4.9 (non-stock; if installed) or CLang 3.8 (stock)
  [ -n "$(which gcc-4.9)" ] && ccbin='gcc-4.9' || ccbin='clang-3.8'
  case "${arg_ccbin}" in
    '') ;;

    *clang++*)
      ccbin='clang++-3.8'
      ;;

    *clang*)
      ccbin='clang-3.8'
      ;;

    *gcc*)
      if [ -n "$(which gcc-4.9)" ]; then
        ccbin='gcc-4.9'
      else
        ccbin='clang-3.8'
        echo "WARNING[${0}]: No supported gcc version is available; using '${ccbin}' instead" >&2
      fi
      ;;

    *g++*)
      if [ -n "$(which g++-4.9)" ]; then
        ccbin='g++-4.9'
      else
        ccbin='clang++-3.8'
        echo "WARNING[${0}]: No supported g++ version is available; using '${ccbin}' instead" >&2
      fi
      ;;

    *)
      echo "WARNING[${0}]: Unsupported compiler '${arg_ccbin}'; using '${ccbin}' instead" >&2
      ;;

  esac
else
  ccbin="${arg_ccbin}"
fi

# Let's match user GPU architecture the best we can
arch=
case "${arg_arch}" in
  'sm_75')
    if [ ${CUDA_VERSION%%.*} -ge 10 ]; then
      arch="${arg_arch}"
    else
      arch='sm_70'
      echo "WARNING[${0}]: Requested GPU architecture '${arg_arch}' unsupported by CUDA ${CUDA_VERSION}; using '${arch}' instead" >&2
    fi
    ;;

  *)
    arch="${arg_arch}"
    ;;
esac

# Let's do it!
[ -n "${NVCC_WRAPPER_DEBUG}" ] && echo "DEBUG[${0}]: nvcc ${ccbin:+-ccbin "${ccbin}"} ${arch:+-arch "${arch}"} ${args[@]}" >&2
exec /usr/lib/nvidia-cuda-toolkit/bin/nvcc ${ccbin:+-ccbin "${ccbin}"} ${arch:+-arch "${arch}"} "${args[@]}"

